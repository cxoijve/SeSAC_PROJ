*&---------------------------------------------------------------------*
*&      Module  EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit INPUT.
  CASE sy-ucomm.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
    WHEN 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  CASE ok_code.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'SEARCH'.
      " SO Header 리스트 가져오기
      IF zssssd0101-sodat_b IS NOT INITIAL AND zssssd0101-sodat_e IS NOT INITIAL.
        IF zssssd0101-sodat_b > zssssd0101-sodat_e.
          MESSAGE i999(zmcss) WITH '유효하지 않은 일자 범위입니다.' DISPLAY LIKE 'E'.
          RETURN.
          SET CURSOR FIELD 'ZSSSSD0101-SODAT_B'.
        ENDIF.
      ENDIF.

      PERFORM get_header_list.

      IF gt_head IS INITIAL.
        MESSAGE i999(zmcss) WITH '조건에 해당되는 판매오더가 존재하지 않습니다.'.
*        RETURN.
      ENDIF.

    WHEN 'GOTO2'.
      PERFORM select_row1 CHANGING gv_subrc.
      IF gv_subrc EQ 0.
        MOVE-CORRESPONDING gs_head TO zssssd0103.
        PERFORM get_emp_info CHANGING zssssd0103.
        PERFORM get_item_list CHANGING gt_item.
        PERFORM set_toprc USING gt_item
                          CHANGING zssssd0103.
        CALL SCREEN 0200.
        CLEAR: zssssd0103, gs_item, gt_item, gs_head_udt, gs_item_udt, gt_item_udt.
        ts_info-activetab = 'TAB1'.
        PERFORM get_header_list.
      ENDIF.

    WHEN 'GOTO4'.
*      PERFORM set_sonum.
*      CLEAR: gs_head_crt, gt_item_crt, gs_item_crt.
      CALL SCREEN 0400.
      CLEAR: gs_head_crt, gt_item_crt, gs_item_crt.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
  CASE ok_code.
    WHEN 'BACK'.
      PERFORM refresh_alv CHANGING go_alv1.
      LEAVE TO SCREEN 0100.
    WHEN 'B_RGTOR'.
      CALL FUNCTION 'Z_FMSS_CALL_EMP_DETAIL'
        EXPORTING
          iv_pernr   = zssssd0103-rgtor
          iv_ismodal = 'X'    " 모달 형태
          iv_dtllv   = 'A'.   " 축약 정보
    WHEN 'TAB1'.
      ts_info-activetab = 'TAB1'.
    WHEN 'TAB2'.
      ts_info-activetab = 'TAB2'.
    WHEN 'GOTO3'.
      IF zssssd0103-stat EQ 'N'.    " 미출고된 SO만 수정 가능
        MOVE-CORRESPONDING zssssd0103 TO gs_head_udt.
*        PERFORM get_mat_f4 USING gs_head_udt-cstid.
        CALL SCREEN 0300.
        CLEAR: gs_head_udt, gs_item_udt, gt_item_udt.
        PERFORM get_header_list.
      ELSEIF zssssd0103-stat EQ 'Y'.     " 출고
        MESSAGE i999(zmcss) WITH '출고가 완료된 판매오더는 변경이 불가합니다.' DISPLAY LIKE 'E'.
*        RETURN.
      ELSE.   " 부분출고
        MESSAGE i999(zmcss) WITH '출고가 진행된 판매오더는 변경이 불가합니다.' DISPLAY LIKE 'E'.
*        RETURN.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.
  CASE ok_code.
    WHEN 'BACK'.
      IF gv_changed = abap_true.
        MESSAGE i999(zmcss) WITH '저장하지 않은 변경사항이 있습니다. 변경완료를 눌러주세요.'.
        RETURN.
      ELSE.
        LEAVE TO SCREEN 0.
        CLEAR: gt_head_udt, gt_item_udt, gs_item_udt.
      ENDIF.
      CLEAR gv_changed.

    WHEN 'UPDATE'.
      " 아이템 변경 Update
      PERFORM update_info.
      PERFORM get_item_list CHANGING gt_item_udt.
      PERFORM set_toprc USING gt_item_udt
                        CHANGING gs_head_udt.
      PERFORM refresh_alv CHANGING go_alv4.
      " Screen 200에 반영
*      MOVE-CORRESPONDING gs_head_udt TO zssssd0103.
*      gt_item = gt_item_udt.
*      zssssd0103-toprc = gs_head_udt-toprc.
      IF go_alv2 IS BOUND.
        PERFORM refresh_alv CHANGING go_alv2.
      ENDIF.
*      gv_changed = abap_false.

    WHEN 'APPEND'.
      " 아이템 추가
      PERFORM set_item_ist.
      gv_changed = abap_true.
      CALL SCREEN 301 STARTING AT 10 5
                        ENDING AT 70 15.

    WHEN 'DELETE'.
      DATA: lv_answer TYPE char1,
            lv_index  TYPE sy-tabix,
            lv_sonum  TYPE ztsssoi-sonum.
      PERFORM select_row2 CHANGING gv_subrc lv_index.

      IF gv_subrc EQ 0.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = '아이템 삭제'
            text_question         = '선택한 아이템을 삭제하시겠습니까?'
            text_button_1         = '예'
*           ICON_BUTTON_1         = ' '
            text_button_2         = '아니오'
*           ICON_BUTTON_2         = ' '
            default_button        = '1'
            display_cancel_button = 'X'
          IMPORTING
            answer                = lv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        IF lv_answer = '1'.
          IF gs_item_udt-itnum IS NOT INITIAL.
            " 기존 DB 레코드인지 확인
            SELECT SINGLE sonum
              FROM ztsssoi
              INTO lv_sonum
             WHERE sonum = gs_item_udt-sonum
               AND itnum = gs_item_udt-itnum.
            IF sy-subrc EQ 0.
              " 1. 기존 DB 레코드
              UPDATE ztsssoi
                 SET del = 'X'
               WHERE sonum EQ gs_item_udt-sonum
                 AND itnum EQ gs_item_udt-itnum.

              IF sy-subrc = 0.
                COMMIT WORK.
*              DELETE gt_item_udt WHERE sonum = gs_item_udt-sonum
*                                   AND itnum = gs_item_udt-itnum.
                DELETE gt_item_udt INDEX lv_index.
                PERFORM set_toprc USING gt_item_udt
                                  CHANGING gs_head_udt.
                gv_changed = abap_true.
                MESSAGE i999(zmcss) WITH '삭제 성공' DISPLAY LIKE 'S'.
              ELSE.
                ROLLBACK WORK.
*              MESSAGE i999(zmcss) WITH '삭제 실패' DISPLAY LIKE 'E'.
              ENDIF.
            ELSE.
              " 2. 신규 레코드
              DELETE gt_item_udt INDEX lv_index.
              PERFORM set_toprc USING gt_item_udt
                                CHANGING gs_head_udt.
              gv_changed = abap_true.
              MESSAGE i999(zmcss) WITH '삭제 성공' DISPLAY LIKE 'S'.
            ENDIF.

            " ALV 갱신
*            PERFORM get_item_list CHANGING gt_item_udt.
*            PERFORM set_toprc USING gt_item_udt CHANGING gs_head_udt.
            PERFORM refresh_alv CHANGING go_alv4.

          ENDIF.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0301  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0301 INPUT.
  CASE ok_code.
    WHEN 'ADD'.
      " 추가
      IF gs_item_ist-somnr IS NOT INITIAL
        AND gs_item_ist-amount IS NOT INITIAL
        AND gs_item_ist-soprc IS NOT INITIAL
        AND gs_item_ist-plant IS NOT INITIAL.

        " 300번 ALV에 추가
        APPEND gs_item_ist TO gt_item_udt.
        gv_changed = abap_true.
        PERFORM set_toprc USING gt_item_udt CHANGING gs_head_udt.

      ELSE.
        MESSAGE i999(zmcss) WITH '필수 입력값 누락' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
*      PERFORM get_item_list CHANGING gt_item_udt.
      PERFORM refresh_alv CHANGING go_alv4.
      LEAVE TO SCREEN 0.
    WHEN 'CANC'.
      " 취소
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  SH_SACAT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE sh_sacat INPUT.
  " 현재 고객코드 가져오기
*  DATA(lv_cstid) = gs_head_udt-cstid.

  " 고객별 허용 자재 조회
*  PERFORM get_mat_f4 USING lv_cstid.

  " F4 팝업 호출
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      retfield    = 'SOMNR'       " 화면 필드 이름
*      dynpprog    = sy-repid
*      dynpnr      = sy-dynnr
*      dynprofield = 'SOMNR'
*    TABLES
*      value_tab   = gt_sacat
*    EXCEPTIONS
*      OTHERS      = 1.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CHECK_MATNR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE check_matnr INPUT.
  DATA lv_cstid TYPE ztsssacat-cstid.
  lv_cstid = gs_head_udt-cstid.

  IF gs_item_ist-somnr IS NOT INITIAL.
    CLEAR: gs_item_ist-soprc, gs_item_ist-matnm.

    SELECT SINGLE a~csprc b~matnm
      FROM ztsssacat AS a
      INNER JOIN ztssmat_t AS b
        ON a~prdnr = b~matnr
      INTO (gs_item_ist-soprc,
            gs_item_ist-matnm)
     WHERE a~cstid = lv_cstid
       AND a~prdnr = gs_item_ist-somnr
       AND b~langu = '3'.

    IF sy-subrc <> 0.
      MESSAGE e999(zmcss) WITH '해당 고객에게 판매 가능한 제품이 아닙니다.'.
      CLEAR gs_item_ist-somnr.
      RETURN.
    ENDIF.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.
  IF gs_head_crt-sodat IS NOT INITIAL
   OR gs_head_crt-cstid IS NOT INITIAL
   OR gs_head_crt-dudat IS NOT INITIAL
   OR gs_head_crt-rgtor IS NOT INITIAL
   OR gs_head_crt-rgdat IS NOT INITIAL.
    gv_changed = abap_true.
  ENDIF.

  CASE ok_code.
    WHEN 'BACK'.
      IF gv_changed = abap_true.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = '판매오더 생성'
            text_question         = '판매오더를 저장하지 않고 나가시겠습니까?'
            text_button_1         = '예'
*           ICON_BUTTON_1         = ' '
            text_button_2         = '아니오'
*           ICON_BUTTON_2         = ' '
            default_button        = '2'
            display_cancel_button = 'X'
          IMPORTING
            answer                = lv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.
        IF lv_answer = '1'.       " 예
          CLEAR gv_changed.
          LEAVE TO SCREEN 0.
        ELSEIF lv_answer = '2'.   " 아니오
*          EXIT.
          RETURN.
        ENDIF.
      ELSE.       " 아무런 데이터 입력 x
        LEAVE TO SCREEN 0.
      ENDIF.
      PERFORM refresh_alv CHANGING go_alv1.
      CLEAR: gt_head_crt, gt_item_crt, gs_item_crt.

    WHEN 'ENTER'.
      " 고객명 가져오기
      SELECT SINGLE cname
        FROM ztsscust
        INTO gs_head_crt-cname
       WHERE cstid = gs_head_crt-cstid.
      zssssd0103-cstid = gs_head_crt-cstid.

*      " 사원 정보 가져오기
*      PERFORM get_emp_info CHANGING gs_head_crt.
*      zssssd0103-ename = gs_head_crt-ename.
*      zssssd0103-persg_t = gs_head_crt-persg_t.

    WHEN 'INSERT'.
      " DB에 인서트 - 헤더 / 아이템
      gv_valid = abap_false.
      PERFORM check_required.       " 헤더, 아이템 체크
      IF gv_valid = abap_true.
        PERFORM insert_info.
      ENDIF.
      zssssd0103-sonum = gs_head_crt-sonum.
      PERFORM get_item_list CHANGING gt_item_crt.
      PERFORM set_toprc USING gt_item_crt
                        CHANGING gs_head_crt.
      PERFORM refresh_alv CHANGING go_alv5.
      " Screen 100에 반영
*      MOVE-CORRESPONDING gs_head_crt TO zssssd0102.
      PERFORM get_header_list.
      IF go_alv1 IS BOUND.
        PERFORM refresh_alv CHANGING go_alv1.
      ENDIF.

    WHEN 'APPEND'.
      " 아이템 추가
      PERFORM set_item_add.
      gv_changed = abap_true.
      CALL SCREEN 401 STARTING AT 10 5
                        ENDING AT 70 15.

    WHEN 'DELETE'.
      DATA: lv_index2  TYPE sy-tabix,
            lv_answer2 TYPE char1.

      PERFORM select_row3 CHANGING lv_index2.

      IF lv_index <= 0.         " row 선택 안되었으면 종료
        RETURN.
      ENDIF.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar              = '아이템 삭제'
          text_question         = '선택한 아이템을 삭제하시겠습니까?'
          text_button_1         = '예'
*         ICON_BUTTON_1         = ' '
          text_button_2         = '아니오'
*         ICON_BUTTON_2         = ' '
          default_button        = '1'
          display_cancel_button = 'X'
        IMPORTING
          answer                = lv_answer2
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.

      " 팝업 실패/예외는 삭제하지 않음
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      " 정리: '1'일 때만 삭제(나머지 '2' 또는 공백 등은 취소)
      SHIFT lv_answer2 LEFT DELETING LEADING space.
      IF lv_answer2 NE '1'.
        RETURN.
      ENDIF.

*      IF lv_answer2 = '1'.
      DELETE gt_item_crt INDEX lv_index.
      gv_changed = abap_true.
      MESSAGE i999(zmcss) WITH '삭제 성공' DISPLAY LIKE 'S'.
*      ENDIF.

      " ALV 갱신
*      PERFORM get_item_list CHANGING gt_item_crt.
*      PERFORM set_toprc USING gt_item_crt CHANGING gs_head_crt.    " gs_item_crt 없어짐
      PERFORM refresh_alv CHANGING go_alv5.

*    ENDIF.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0401  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0401 INPUT.
  CASE ok_code.
    WHEN 'ADD'.
      " 추가
      IF gs_item_add-amount IS NOT INITIAL
        AND gs_item_add-soprc IS NOT INITIAL
        AND gs_item_add-plant IS NOT INITIAL.

        " 300번 ALV에 추가
        APPEND gs_item_add TO gt_item_crt.
        gv_changed = abap_true.
        PERFORM set_toprc USING gt_item_crt CHANGING gs_head_crt.

      ELSE.
        MESSAGE i999(zmcss) WITH '필수 입력값 누락' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
*      PERFORM get_item_list CHANGING gt_item_udt.
      PERFORM refresh_alv CHANGING go_alv5.
      LEAVE TO SCREEN 0.
    WHEN 'CANC'.
      " 취소
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CHECK_MATNR2  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE check_matnr2 INPUT.
  DATA lv_cusid TYPE ztsssacat-cstid.
  lv_cusid = gs_head_crt-cstid.

  IF lv_cusid IS INITIAL.
    MESSAGE i999(zmcss) WITH '먼저 판매오더 헤더에 고객코드를 입력해 주세요.'.
    LEAVE TO SCREEN 0.
    RETURN.
  ENDIF.

  IF gs_item_add-somnr IS NOT INITIAL.
    CLEAR: gs_item_add-soprc, gs_item_add-matnm.

    SELECT SINGLE a~csprc b~matnm
      FROM ztsssacat AS a
      INNER JOIN ztssmat_t AS b
        ON a~prdnr = b~matnr
      INTO (gs_item_add-soprc,
            gs_item_add-matnm)
     WHERE a~cstid = lv_cusid
       AND a~prdnr = gs_item_add-somnr
       AND b~langu = '3'.

    IF sy-subrc <> 0.
      MESSAGE e999(zmcss) WITH '해당 고객에게 판매 가능한 제품이 아닙니다.'.
      CLEAR gs_item_add-somnr.
      RETURN.
    ENDIF.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  HEADER_CHANGED  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE header_changed INPUT.
  gv_changed = abap_true.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CHECK_PERNR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE check_pernr INPUT.
*  DATA: lv_estat TYPE ztssemp-estat.
*
*  SELECT SINGLE estat
*    FROM ztssemp
*    INTO lv_estat
*   WHERE pernr = gs_head_crt-rgtor.
*
*  IF sy-subrc <> 0.
*    " 사원코드가 존재하지 않을 때
*    MESSAGE e999(zmcss) WITH '존재하지 않는 입니다.'. "DISPLAY LIKE 'E'.
*    CLEAR gs_head_crt-rgtor.
*    RETURN.
*  ELSEIF lv_estat <> '1'.
*    " 재직자가 아니면 입력 금지
*    MESSAGE e999(zmcss) WITH '재직 중이지 않은 사원은 입력할 수 없습니다.'. "DISPLAY LIKE 'E'.
*    CLEAR gs_head_crt-rgtor.
*    RETURN.
*  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CHECK_CSTID  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE check_cstid INPUT.
*  DATA: lv_endda TYPE ztsscust-endda.
*
*  SELECT SINGLE endda
*    FROM ztsscust
*    INTO lv_endda
*   WHERE cstid = gs_head_crt-cstid.
*
*  IF sy-subrc <> 0.
*    " 고객코드가 존재하지 않을 때
*    MESSAGE e999(zmcss) WITH '존재하지 않는 고객입니다.'.
*    CLEAR gs_head_crt-cstid.
*    RETURN.
*  ELSEIF lv_endda <> '99991231'.
*    " 계약 종료된 고객 입력 금지
*    MESSAGE e999(zmcss) WITH '계약이 종료된 고객은 입력할 수 없습니다.'.
*    CLEAR gs_head_crt-cstid.
*    RETURN.
*  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_EMP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_emp INPUT.
  " 헤더 정보 없는 경우 검증 패스
  IF gs_head_crt IS INITIAL OR ok_code = 'APPEND'.
    RETURN.
  ENDIF.

  CASE ok_code.
    WHEN 'BACK' OR 'CANC'.
      RETURN.
  ENDCASE.

  DATA: lv_estat TYPE ztssemp-estat.

  SELECT SINGLE estat
    FROM ztssemp
    INTO lv_estat
   WHERE pernr = gs_head_crt-rgtor.

  IF sy-subrc <> 0.
    " 사원코드가 존재하지 않을 때
    MESSAGE i999(zmcss) WITH '존재하지 않는 사원입니다.' DISPLAY LIKE 'E'.
    CLEAR gs_head_crt-rgtor.
    RETURN.
  ELSEIF lv_estat <> '1'.
    " 재직자가 아니면 입력 금지
    MESSAGE i999(zmcss) WITH '재직 중이지 않은 사원은 입력할 수 없습니다.' DISPLAY LIKE 'E'.
    CLEAR gs_head_crt-rgtor.
    RETURN.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_CUST  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_cust INPUT.
  " 헤더 정보 없는 경우 검증 패스
  IF gs_head_crt IS INITIAL OR ok_code = 'APPEND'.
    RETURN.
  ENDIF.

  CASE ok_code.
    WHEN 'BACK' OR 'CANC'.
      RETURN.
  ENDCASE.

  DATA: lv_endda TYPE ztsscust-endda.

  SELECT SINGLE endda
    FROM ztsscust
    INTO lv_endda
   WHERE cstid = gs_head_crt-cstid.

  IF sy-subrc <> 0.
    " 고객코드가 존재하지 않을 때
    MESSAGE i999(zmcss) WITH '존재하지 않는 고객입니다.' DISPLAY LIKE 'E'.
    CLEAR gs_head_crt-cstid.
    RETURN.
  ELSEIF lv_endda <> '99991231'.
    " 계약 종료된 고객 입력 금지
    MESSAGE i999(zmcss) WITH '계약이 종료된 고객은 입력할 수 없습니다.' DISPLAY LIKE 'E'.
    CLEAR gs_head_crt-cstid.
    RETURN.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  HEADER_FIRST  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE header_first INPUT.
  CASE ok_code.
    WHEN 'APPEND'.
      IF gs_head_crt IS INITIAL.
        MESSAGE s999(zmcss) WITH '헤더 정보를 먼저 입력해 주세요.' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
  ENDCASE.
ENDMODULE.

----------------------------------------------------------------------------------
Extracted by Mass Download version 1.5.5 - E.G.Mellodew. 1998-2025. Sap Release 750

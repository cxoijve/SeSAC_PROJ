*&---------------------------------------------------------------------*
*&  Include           MZSSMM02F03
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  HANDLE_TOOLBAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_OBJECT  text
*      -->P_SENDER  text
*----------------------------------------------------------------------*
FORM handle_toolbar  USING  pcl_toolbar TYPE REF TO cl_alv_event_toolbar_set
                            p_sender TYPE REF TO cl_gui_alv_grid.

  DATA ls_toolbar TYPE stb_button.

  CASE p_sender.
    WHEN go_alv_po_waiting.
      PERFORM add_toolbar_button USING 'I_ADD' TEXT-b01 icon_add_row CHANGING pcl_toolbar.
    WHEN go_alv_po_items.
      PERFORM add_toolbar_button USING 'I_DEL' TEXT-b02 icon_incomplete CHANGING pcl_toolbar.
      PERFORM add_toolbar_button USING 'I_ALL_DEL' TEXT-b03 icon_system_modus_delete CHANGING pcl_toolbar.
    WHEN go_alv_po_confirm.
      PERFORM add_toolbar_button USING 'I_GR' TEXT-b04 icon_check CHANGING pcl_toolbar.
      PERFORM add_toolbar_button USING 'I_CON_DEL' TEXT-b02 icon_incomplete CHANGING pcl_toolbar.
    WHEN go_alv_gr_list.
      PERFORM add_toolbar_button USING 'I_DETAIL' TEXT-b06 icon_check CHANGING pcl_toolbar.
    WHEN go_alv_editgr.
*      PERFORM add_toolbar_button USING 'I_ADD' TEXT-b01 icon_workflow_activity CHANGING pcl_toolbar.
      PERFORM add_toolbar_button USING 'I_EDIT' TEXT-b05 icon_workflow_activity CHANGING pcl_toolbar.
      PERFORM add_toolbar_button USING 'I_EDIT_DEL' TEXT-b02 icon_incomplete CHANGING pcl_toolbar.
      PERFORM add_toolbar_button USING 'I_EDIT_ALL_DEL' TEXT-b03 icon_system_modus_delete CHANGING pcl_toolbar.
  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADD_TOOLBAR_BUTTON
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0025   text
*      -->P_TEXT_B01  text
*      -->P_ICON_WORKFLOW_ACTIVITY  text
*      <--P_PCL_TOOLBAR  text
*----------------------------------------------------------------------*
FORM add_toolbar_button  USING   pv_func     TYPE ui_func
                                 pv_text     TYPE text40
                                 pv_icon     TYPE icon_d
                        CHANGING pcl_toolbar TYPE REF TO cl_alv_event_toolbar_set.

  DATA: ls_toolbar TYPE stb_button.

  ls_toolbar-function  = pv_func.
  ls_toolbar-butn_type = 0.
  ls_toolbar-text      = pv_text.
  ls_toolbar-icon      = pv_icon.
  ls_toolbar-quickinfo = pv_text.

  APPEND ls_toolbar TO pcl_toolbar->mt_toolbar.

  PERFORM add_toolbar_sep CHANGING pcl_toolbar.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADD_TOOLBAR_SEP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_PCL_TOOLBAR  text
*----------------------------------------------------------------------*
FORM add_toolbar_sep  CHANGING  c_toolbar TYPE REF TO cl_alv_event_toolbar_set.

  DATA: ls_toolbar TYPE stb_button.

  ls_toolbar-butn_type = 3.
  APPEND ls_toolbar TO c_toolbar->mt_toolbar.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_UCOMM  text
*----------------------------------------------------------------------*
FORM handle_user_command  USING    pv_ucomm TYPE sy-ucomm.


  CASE pv_ucomm.
    WHEN 'I_ADD'.
      PERFORM handle_add_item.
    WHEN 'I_DEL'.
      PERFORM handle_delete_item.
    WHEN 'I_ALL_DEL'.
      PERFORM handle_delete_all_item.
    WHEN 'I_GR'.
      PERFORM handle_go_gr.
    WHEN 'I_EDIT'.
      PERFORM handle_enable_edit_mode.
    WHEN 'I_EDIT_DEL'.
      PERFORM handle_edit_delete_item.
    WHEN 'I_EDIT_ALL_DEL'.
      PERFORM handle_edit_delete_all.
    WHEN 'I_DETAIL'.
      PERFORM handle_detail_info.
    WHEN 'I_CON_DEL'.
      PERFORM handle_delete_confirm.
  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_ADD_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_add_item .

  PERFORM add_item_data.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADD_ITEM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM add_item_data .

  DATA : lv_rowid TYPE i,
         ls_data  LIKE LINE OF gt_podata.

  PERFORM check_pop_item_data USING go_alv_po_waiting CHANGING gv_subrc lv_rowid.
  IF gv_subrc = 0.
    DATA: lt_style TYPE lvc_t_styl,
          ls_style TYPE lvc_s_styl.

    IF gt_item IS NOT INITIAL.

      LOOP AT gt_item ASSIGNING FIELD-SYMBOL(<fs_line>).

        CLEAR <fs_line>-style.
        " 1번째 행: REQTY = 0 → 편집 불가
        IF <fs_line>-reqty <= 0.
          <fs_line>-style = VALUE #(
          ( fieldname = 'ORQTY' style = cl_gui_alv_grid=>mc_style_disabled ) ).

        ELSEIF <fs_line>-reqty > 0.
          <fs_line>-style = VALUE #(
          ( fieldname = 'ORQTY' style = cl_gui_alv_grid=>mc_style_enabled ) ).

        ENDIF.

        " 2번째 행: REQTY = 10 → 편집 가능 (아무 설정 안 함)

      ENDLOOP.

*      CALL METHOD go_alv_po_items->set_frontend_fieldcatalog
*        EXPORTING
*          it_fieldcatalog = gt_fcat2.
*
*      CALL METHOD go_alv_po_items->refresh_table_display
*        EXPORTING
*          is_stable = VALUE #( row = 'X' col = 'X' )  " 스크롤 위치 유지
*        EXCEPTIONS
*          finished  = 1
*          OTHERS    = 2.
*      PERFORM refresh_table_display CHANGING go_alv_po_items.
*      PERFORM refresh_alv_0102.
      gs_layo2-stylefname = 'STYLE'.
      PERFORM set_tab_fdp_with_exclude USING 'ZSSSMM0213' gs_layo2 gt_exclude CHANGING gt_item gt_fcat2 gt_sort go_alv_po_items.


    ENDIF.

  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_POP_ITEM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GO_ALV_WAITPO  text
*      <--P_GV_SUBRC  text
*      <--P_LV_ROWID  text
*----------------------------------------------------------------------*
FORM check_pop_item_data  USING VALUE(co_alv) TYPE REF TO cl_gui_alv_grid
                          CHANGING cv_subrc TYPE sy-subrc
                                   cv_rowid TYPE i.

  DATA: lt_row_no TYPE lvc_t_roid,
        lv_venid  TYPE ztssvend-venid,
        lt_item   LIKE gt_item.

  CLEAR cv_subrc.

  PERFORM get_selected_rows USING co_alv CHANGING lt_row_no cv_subrc.
  IF cv_subrc <> 0. RETURN. ENDIF.

  PERFORM check_dup_po USING lt_row_no CHANGING cv_subrc.
  IF cv_subrc <> 0. RETURN. ENDIF.

  PERFORM check_vendor_validate USING lt_row_no CHANGING lv_venid cv_subrc.
  IF cv_subrc <> 0. RETURN. ENDIF.

  PERFORM fetch_add_poitems USING lt_row_no lv_venid CHANGING lt_item.

  PERFORM get_item_data USING lv_venid CHANGING lt_item.

  APPEND LINES OF lt_item TO gt_item.
  PERFORM renumber_gr_number.

  PERFORM update_selected_color USING go_alv_po_waiting lt_row_no.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_SELECTED_ROWS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CO_ALV  text
*      <--P_LT_ROW_NO  text
*      <--P_CV_SUBRC  text
*----------------------------------------------------------------------*
FORM get_selected_rows  USING    co_alv    TYPE REF TO cl_gui_alv_grid
                        CHANGING ct_row_no TYPE lvc_t_roid
                                 cv_subrc   TYPE sy-subrc.

  DATA: lv_cnt TYPE i.

  CALL METHOD co_alv->get_selected_rows
    IMPORTING
      et_row_no = ct_row_no.

  DESCRIBE TABLE ct_row_no LINES lv_cnt.

  IF lv_cnt = 0.
    cv_subrc = 4.
*    MESSAGE s110(zmcss). "  '1개의 행을 선택해주세요!'.
    MESSAGE i110(zmcss). "  '1개의 행을 선택해주세요!'.
    RETURN.
  ENDIF.

  " 필드문 - s / e

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_DUP_PO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ROW_NO  text
*      <--P_CV_SUBRC  text
*----------------------------------------------------------------------*
FORM check_dup_po  USING    it_row_no TYPE lvc_t_roid
                   CHANGING cv_subrc  TYPE sy-subrc.

  DATA: ls_row_no TYPE lvc_s_roid,
        ls_item   LIKE LINE OF gt_item.

  FIELD-SYMBOLS: <fs_podata> LIKE LINE OF gt_podata.

  LOOP AT it_row_no INTO ls_row_no.
    READ TABLE gt_podata INDEX ls_row_no-row_id ASSIGNING <fs_podata>.
    CHECK sy-subrc = 0.

    " Check if PO already exists in item table
    READ TABLE gt_item INTO ls_item WITH KEY ponum = <fs_podata>-ponum.

    IF sy-subrc = 0.
      cv_subrc = 4.
      MESSAGE s999(zmcss)
        WITH '이미 추가된 PO 번호입니다:' <fs_podata>-ponum
        DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.
  ENDLOOP.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_VENDOR_VALIDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ROW_NO  text
*      <--P_LV_VENID  text
*      <--P_CV_SUBRC  text
*----------------------------------------------------------------------*
FORM check_vendor_validate  USING    p_row_no TYPE lvc_t_roid
                            CHANGING cv_venid  TYPE ztssvend-venid
                                     cv_subrc  TYPE sy-subrc.

  DATA: ls_row_no     TYPE lvc_s_roid,
        lv_temp_venid TYPE ztssvend-venid,
        ls_item       LIKE LINE OF gt_item,
        lv_cnt        TYPE i.

  FIELD-SYMBOLS: <fs_podata> LIKE LINE OF gt_podata.


  READ TABLE p_row_no INDEX 1 INTO ls_row_no.
  READ TABLE gt_podata INDEX ls_row_no-row_id ASSIGNING <fs_podata>.

  SELECT SINGLE venid
    INTO cv_venid
    FROM ztsspoh
    WHERE ponum = <fs_podata>-ponum.

  IF gt_item IS NOT INITIAL.
    READ TABLE gt_item INTO ls_item INDEX 1.
    IF ls_item-venid <> cv_venid.
      cv_subrc = 4.
      MESSAGE s999(zmcss)
        WITH '같은 벤더사일 때만 아이템에 추가 가능합니다!'
        DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.
  ENDIF.

  DESCRIBE TABLE p_row_no LINES lv_cnt.

  UNASSIGN <fs_podata>.
  IF lv_cnt > 1.
    LOOP AT p_row_no INTO ls_row_no FROM 2.
      READ TABLE gt_podata INDEX ls_row_no-row_id ASSIGNING <fs_podata>.
      CHECK sy-subrc = 0.

      SELECT SINGLE venid
        INTO lv_temp_venid
        FROM ztsspoh
        WHERE ponum = <fs_podata>-ponum.

      IF lv_temp_venid <> cv_venid.
        cv_subrc = 4.
        MESSAGE s999(zmcss) WITH '같은 벤더사일 때만 아이템에 추가 가능합니다!' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FETCH_ADD_POITEMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ROW_NO  text
*      -->P_LV_VENID  text
*      <--P_LT_ITEM  text
*----------------------------------------------------------------------*
FORM fetch_add_poitems  USING    p_row_no TYPE lvc_t_roid
                                 p_venid   TYPE ztssvend-venid
                        CHANGING ct_item   LIKE gt_item.

  DATA: ls_row_no TYPE lvc_s_roid,
        lt_podata LIKE  gt_podata,
        ls_podata LIKE LINE OF gt_podata.

  FIELD-SYMBOLS: <fs_podata> LIKE LINE OF gt_podata.

  LOOP AT p_row_no INTO ls_row_no.
    READ TABLE gt_podata INDEX ls_row_no-row_id ASSIGNING <fs_podata>.
    IF sy-subrc <> 0. RETURN. ENDIF.

    ls_podata = <fs_podata>.
    APPEND ls_podata TO lt_podata.
    CLEAR ls_podata.
  ENDLOOP.

  IF lt_podata IS NOT INITIAL.

    SELECT ponum itnum pomnr amount meins
      INTO CORRESPONDING FIELDS OF TABLE ct_item
      FROM ztsspoi
      FOR ALL ENTRIES IN lt_podata
      WHERE ponum = lt_podata-ponum.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_ITEM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_VENID  text
*      <--P_LT_ITEM  text
*----------------------------------------------------------------------*
FORM get_item_data  USING VALUE(p_venid) TYPE ztssvend-venid
                    CHANGING ct_item LIKE gt_item.

  DATA : lt_grsum LIKE TABLE OF gs_itamt,
         ls_grsum LIKE gs_itamt.

  FIELD-SYMBOLS: <fs_item> LIKE LINE OF ct_item.
  PERFORM get_gr_sum CHANGING lt_grsum.

  LOOP AT ct_item ASSIGNING <fs_item>.

    IF <fs_item>-venid IS INITIAL.
      <fs_item>-venid = p_venid.
    ENDIF.
    PERFORM get_vendor_name USING <fs_item>-venid CHANGING <fs_item>-vname.
    PERFORM get_mat_name USING <fs_item>-pomnr CHANGING <fs_item>-matnm.

    READ TABLE lt_grsum INTO ls_grsum WITH KEY ponum = <fs_item>-ponum
                                               itnum = <fs_item>-itnum.

    IF sy-subrc = 0. <fs_item>-grqty = ls_grsum-amount. ENDIF.
    <fs_item>-reqty = <fs_item>-amount - <fs_item>-grqty.
    IF <fs_item>-stoid IS INITIAL. <fs_item>-stoid = 'SL01'. ENDIF.

    PERFORM get_storage_name USING <fs_item>-stoid CHANGING <fs_item>-stonm.

  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GR_SUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_GRSUM  text
*----------------------------------------------------------------------*
FORM get_gr_sum   CHANGING ct_gr_sum LIKE gt_itamt.


  DATA: lt_gr_raw TYPE TABLE OF ztssgri,
        ls_gr_raw LIKE LINE OF lt_gr_raw,
        ls_gr_sum LIKE gs_itamt.

  SELECT ponum itnum amount
    INTO CORRESPONDING FIELDS OF TABLE lt_gr_raw
    FROM ztssgri.

  IF sy-subrc <> 0. MESSAGE s999(zmcss) WITH '입고내역이 존재하지 않습니다!'. RETURN. ENDIF.

  LOOP AT lt_gr_raw INTO ls_gr_raw.
    ls_gr_sum-ponum  = ls_gr_raw-ponum.
    ls_gr_sum-itnum  = ls_gr_raw-itnum.
    ls_gr_sum-amount = ls_gr_raw-amount.
    COLLECT ls_gr_sum INTO ct_gr_sum.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RENUMBER_GR_NUMBER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM renumber_gr_number .

  DATA : lv_grseq TYPE n LENGTH 3 VALUE '001'.

  FIELD-SYMBOLS : <fs_item> LIKE LINE OF gt_item.

  LOOP AT gt_item ASSIGNING <fs_item>.
    <fs_item>-grseq = lv_grseq.
    lv_grseq = lv_grseq + 1.
  ENDLOOP.

  gv_seqnum = lv_grseq - 1.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DATA_CHANGED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*      -->P_SENDER  text
*----------------------------------------------------------------------*
FORM handle_data_changed  USING    p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                                   p_sender TYPE REF TO cl_gui_alv_grid.



  DATA : ls_cell LIKE LINE OF p_data_changed->mt_good_cells.

  LOOP AT p_data_changed->mt_good_cells INTO ls_cell.

    CASE p_sender.
      WHEN go_alv_po_items.
        PERFORM handle_poitem_change USING p_data_changed ls_cell.

      WHEN go_alv_editgr.
        PERFORM handle_editgr_change USING p_data_changed ls_cell.

    ENDCASE.

  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_POITEM_CHANGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_DATA_CHANGED  text
*      -->P_LS_CELL  text
*----------------------------------------------------------------------*
FORM handle_poitem_change   USING p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                                  ps_cell        LIKE LINE OF p_data_changed->mt_good_cells.

  DATA: lv_orqty TYPE p,
        lv_reqty TYPE p,
        lv_ponum TYPE ztsspoi-ponum.

  READ TABLE gt_item INTO gs_item INDEX ps_cell-row_id.
  CHECK sy-subrc = 0.

  CASE ps_cell-fieldname.
    WHEN 'ORQTY'.
      PERFORM get_cell_value
        USING    p_data_changed ps_cell-row_id 'ORQTY'
        CHANGING lv_orqty.

      PERFORM get_cell_value
        USING    p_data_changed ps_cell-row_id 'REQTY'
        CHANGING lv_reqty.

      PERFORM get_cell_value
        USING    p_data_changed ps_cell-row_id 'PONUM'
        CHANGING lv_ponum.

      PERFORM validate_orqty
        USING    p_data_changed
                 ps_cell
                 lv_orqty
                 lv_reqty
                 lv_ponum
        CHANGING gs_item.

      PERFORM refresh_table_display CHANGING go_alv_po_items.
      PERFORM refresh_table_display CHANGING go_alv_po_confirm.


  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CELL_VALUE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_DATA_CHANGED  text
*      -->P_PS_CELL_ROW_ID  text
*      -->P_0849   text
*      <--P_LV_ORQTY  text
*----------------------------------------------------------------------*
FORM get_cell_value USING p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                    p_row_id TYPE lvc_s_modi-row_id
                    p_fieldname TYPE lvc_s_modi-fieldname
                    CHANGING p_value.

  p_data_changed->get_cell_value(
    EXPORTING
      i_row_id = p_row_id
      i_fieldname = p_fieldname
    IMPORTING
      e_value = p_value
  ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_ORQTY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_DATA_CHANGED  text
*      -->P_PS_CELL  text
*      -->P_LV_ORQTY  text
*      -->P_LV_REQTY  text
*      -->P_LV_PONUM  text
*      <--P_GS_ITEM  text
*----------------------------------------------------------------------*
FORM validate_orqty  USING    p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                              ps_cell        LIKE LINE OF p_data_changed->mt_good_cells
                              pv_orqty       TYPE p
                              pv_reqty       TYPE p
                              pv_ponum       TYPE ztsspoi-ponum
                     CHANGING cs_item        LIKE gs_item.

  " 주문수량 초과확인하기
  IF pv_orqty > pv_reqty.
    PERFORM add_error_message USING p_data_changed ps_cell '주문수량이 주문가능수량을 초과합니다!'.
    RETURN.
  ENDIF.

  CLEAR gv_msg.
  " 수량 0 이하는 적을 수 없음!
  IF pv_orqty <= 0.
    PERFORM add_error_message USING p_data_changed ps_cell '수량은 0보다 커야 합니다'.
    RETURN.
  ENDIF.

  IF pv_orqty > 999.
    PERFORM add_error_message USING p_data_changed ps_cell '수량을 999개 이상은 작성불가합니다'.
    RETURN.
  ENDIF.

  cs_item-orqty = pv_orqty.
  MODIFY gt_item FROM cs_item INDEX ps_cell-row_id.

  PERFORM update_confirm_table USING cs_item.

*  PERFORM refresh_table_display CHANGING go_alv_po_items.
*  PERFORM refresh_table_display CHANGING go_alv_po_confirm.

  p_data_changed->modify_cell(
    EXPORTING
      i_row_id    = ps_cell-row_id
      i_tabix     = ps_cell-tabix
      i_fieldname = ps_cell-fieldname
      i_value     = pv_orqty
  ).

  MESSAGE s999(zmcss) WITH '수량이 변경되었습니다:' pv_orqty.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADD_ERROR_MESSAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_DATA_CHANGED  text
*      -->P_PS_CELL  text
*      -->P_0968   text
*----------------------------------------------------------------------*
FORM add_error_message  USING p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                              ps_cell        LIKE LINE OF p_data_changed->mt_good_cells
                              pv_message     TYPE string.

  p_data_changed->add_protocol_entry(
    EXPORTING
      i_msgid     = 'ZMCSS'
      i_msgno     = '999'
      i_msgty     = 'S'
      i_msgv1     = pv_message
      i_fieldname = ps_cell-fieldname
      i_row_id    = ps_cell-row_id
  ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  UPDATE_CONFIRM_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CS_ITEM  text
*----------------------------------------------------------------------*
FORM update_confirm_table  USING    ps_item LIKE gs_item.


  DATA: ls_confirm LIKE gs_confirm,
        lv_found   TYPE xfeld,
        ls_color   TYPE lvc_s_scol.

  IF gt_confirm IS NOT INITIAL.

    READ TABLE gt_confirm INTO ls_confirm INDEX 1.

    IF ls_confirm-venid <> ps_item-venid.
      MESSAGE i999(zmcss) WITH '같은 벤더사의 품목만 담을 수 있습니다!'.
      RETURN.
    ENDIF.

  ENDIF.

  DATA : lv_tabix TYPE sy-tabix.

  LOOP AT gt_confirm INTO ls_confirm.

    lv_tabix = sy-tabix.
    IF ls_confirm-ponum = ps_item-ponum
      AND ls_confirm-itnum = ps_item-itnum.

      ls_confirm = ps_item.

      CLEAR ls_confirm-it_col.

      " VNAME 필드 색상 (예: 파란색)
      CLEAR ls_color.
      ls_color-fname = 'VNAME'.          " 필드명
      ls_color-color-col = '5'.          " 파란색
      ls_color-color-int = '0'.          " 일반 강조
      ls_color-color-inv = '0'.          " 반전 없음
      APPEND ls_color TO ls_confirm-it_col.

      CLEAR ls_color.
      ls_color-fname     = 'ORQTY'.  " ← 필드명 확인!
      ls_color-color-col = '3'.
      ls_color-color-int = '0'.
      ls_color-color-inv = '0'.
      APPEND ls_color TO ls_confirm-it_col.


      MODIFY gt_confirm FROM ls_confirm INDEX lv_tabix TRANSPORTING orqty stoid.
      lv_found = 'X'.
*      EXIT.
    ENDIF.
  ENDLOOP.

  " 새로운 항목인 경우 추가
  IF lv_found IS INITIAL.
    CLEAR ls_color.
    ls_color-fname = 'VNAME'.
    ls_color-color-col = '5'.          " 파란색
    ls_color-color-int = '0'.
    ls_color-color-int = '0'.
    APPEND ls_color TO ps_item-it_col.


    CLEAR ls_color.
    ls_color-fname     = 'ORQTY'.  " ← 필드명 확인!
    ls_color-color-col = '3'.
    ls_color-color-int = '0'.
    ls_color-color-inv = '0'.
    APPEND ls_color TO ps_item-it_col.

*    ps_item-grseq = sy-tabix.
    APPEND ps_item TO gt_confirm.
  ENDIF.
  PERFORM renumber_confirm.

*  BREAK-POINT.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DELETE_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_delete_item.

  DATA: lt_row_no TYPE lvc_t_roid,
        ls_row_no TYPE lvc_s_roid,
        lv_index  TYPE sy-tabix,
        lt_ponum  TYPE TABLE OF ztsspoh-ponum,
        ls_item   LIKE LINE OF gt_item.

  CLEAR gv_msg.

  CALL METHOD go_alv_po_items->get_selected_rows
    IMPORTING
      et_row_no = lt_row_no.

  IF lt_row_no IS INITIAL.
    MESSAGE i999(zmcss) WITH '삭제할 행을 선택하세요'.
    RETURN.
  ENDIF.
  LOOP AT lt_row_no INTO ls_row_no.

    READ TABLE gt_item INTO ls_item INDEX ls_row_no-row_id.
    IF sy-subrc = 0.
      APPEND ls_item-ponum TO lt_ponum.
    ENDIF.
  ENDLOOP.
*  SORT lt_row_no BY row_id DESCENDING.
*    DATA : ls_row_no TYPE lvc_s_roid.

  LOOP AT lt_row_no INTO ls_row_no.
    lv_index = ls_row_no-row_id.
    DELETE gt_item INDEX lv_index.
  ENDLOOP.
  SORT lt_ponum.
  DELETE ADJACENT DUPLICATES FROM lt_ponum.

  LOOP AT lt_ponum INTO DATA(lv_ponum).
    PERFORM delete_color_if_no_items USING lv_ponum.
  ENDLOOP.
  PERFORM renumber_gr_number.
  SORT lt_row_no BY row_id DESCENDING.

*  PERFORM delete_each_color_bydata.
*  PERFORM delete_color_bydata.
  PERFORM refresh_alv_0102.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DELETE_ALL_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_delete_all_item .

  CLEAR gt_item.
  gv_seqnum = 0.
  CLEAR gv_msg.

  PERFORM delete_color_bydata.
  PERFORM refresh_alv_0102.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RENUMBER_CONFIRM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM renumber_confirm .

  DATA: lv_seqno TYPE i VALUE 0.

  FIELD-SYMBOLS: <fs_confirm> LIKE LINE OF gt_confirm.

  LOOP AT gt_confirm ASSIGNING <fs_confirm>.
    lv_seqno = lv_seqno + 1.
    <fs_confirm>-grseq = lv_seqno.  " ← grseq를 새로 설정! #
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_GO_GR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_go_gr .

  zsssmm0214-rgtor = gv_rgtor.
  PERFORM get_emp_name USING gv_rgtor CHANGING zsssmm0214-ename.
  CALL SCREEN '0110' STARTING AT 10 5 ENDING AT 80 30.
  PERFORM get_po_datas USING zsssmm0210.
  PERFORM delete_color_bydata.
  PERFORM refresh_alv_0102.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW  text
*      -->P_E_COLUMN  text
*----------------------------------------------------------------------*
FORM handle_double_click  USING ps_row     TYPE lvc_s_row
                                ps_column  TYPE lvc_s_col
                                p_sender TYPE REF TO cl_gui_alv_grid.

  CASE p_sender.
    WHEN go_alv_gr_list.
      CASE ps_column.
        WHEN 'LTEXT'.
          PERFORM handle_editpage USING ps_row.
        WHEN 'VNAME'.
          PERFORM handle_vname_click USING ps_row.
        WHEN 'ENAME'.
          PERFORM handle_emp_click USING ps_row.
      ENDCASE.
    WHEN go_alv_po_waiting.
      CASE ps_column.
        WHEN 'DUDAT'.
          PERFORM handle_dudat_click USING ps_row.
        WHEN OTHERS.
      ENDCASE.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EDITPAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PS_ROW  text
*----------------------------------------------------------------------*
FORM handle_editpage  USING ps_row     TYPE lvc_s_row.
  DATA : ls_grdata LIKE LINE OF gt_grdata,
         lv_grnum  TYPE ztssgri-grnum.

*  PERFORM refresh_alv_0101.

  READ TABLE gt_grdata INTO ls_grdata INDEX ps_row-index.

  SELECT SINGLE grnum
    INTO lv_grnum
    FROM ztssmivi
    WHERE grnum = ls_grdata-grnum.

  IF sy-subrc = 0.
    MESSAGE s999(zmcss) WITH '수정이 불가한 입고문서입니다!' DISPLAY LIKE 'W'.
    RETURN.
  ELSE.
    IF gt_gritem IS INITIAL.
      PERFORM get_gr_item_list USING ps_row-index.
    ENDIF.

    MOVE-CORRESPONDING ls_grdata TO zsssmm0211.
    MOVE-CORRESPONDING ls_grdata TO gs_cond2.
    MOVE-CORRESPONDING gt_gritem TO gt_edit_item.
    LOOP AT gt_edit_item ASSIGNING FIELD-SYMBOL(<fs_eitem>).
      IF <fs_eitem>-del = 'X'.
        <fs_eitem>-color = 'C601'.
        <fs_eitem>-ltext = '@0W@'.
      ENDIF.
    ENDLOOP.
    gt_temp = gt_edit_item.
    CALL SCREEN 0200.

    CLEAR: zsssmm0211,
           gs_cond2,
           gt_edit_item,
           gt_gritem.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GR_ITEM_LIST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PS_ROW_INDEX  text
*----------------------------------------------------------------------*
FORM get_gr_item_list USING pv_index TYPE lvc_index.

  READ TABLE gt_grdata INTO gs_grdata INDEX pv_index.

  DATA : lv_pomnr TYPE ztsspoi-pomnr.
  DATA : lv_venid TYPE ztsspoh-venid.
  DATA : lv_stonm TYPE ztssstrg-stonm.

  DATA ls_scol TYPE lvc_s_scol.

  DATA : BEGIN OF ls_vnprc,
           vnprc TYPE ztssprcat-vnprc,
           curky TYPE ztssprcat-curky,
         END OF ls_vnprc,
         lt_vnprc LIKE TABLE OF ls_vnprc.


  SELECT grnum grseq ponum itnum stoid amount meins del
    INTO CORRESPONDING FIELDS OF TABLE gt_gritem
    FROM ztssgri
    WHERE grnum = gs_grdata-grnum.

  CLEAR gs_gritem.
  LOOP AT gt_gritem INTO gs_gritem.

    SELECT SINGLE pomnr
      INTO lv_pomnr
      FROM ztsspoi
      WHERE ponum = gs_gritem-ponum
      AND itnum = gs_gritem-itnum.

    gs_gritem-pomnr = lv_pomnr.

    SELECT SINGLE venid
      INTO lv_venid
      FROM ztsspoh
      WHERE ponum = gs_gritem-ponum.

    gs_gritem-venid = lv_venid.

    PERFORM get_vendor_name USING lv_venid CHANGING gs_gritem-vname.
    PERFORM get_mat_name USING lv_pomnr CHANGING gs_gritem-matnm.


    SELECT SINGLE vnprc curky
      INTO ls_vnprc
      FROM ztssprcat
      WHERE venid = lv_venid
      AND rawnr = lv_pomnr.

    gs_gritem-toprc = ls_vnprc-vnprc * gs_gritem-amount.
    gs_gritem-curky = ls_vnprc-curky.

    CLEAR ls_scol.
    ls_scol-fname = 'TOPRC'.
    ls_scol-color-col = 3.
    ls_scol-color-int = 1.
    ls_scol-color-inv = 0.
    APPEND ls_scol TO gs_gritem-it_col.

    SELECT SINGLE stonm
      INTO lv_stonm
      FROM ztssstrg
      WHERE stoid = gs_gritem-stoid.
    gs_gritem-stonm = lv_stonm.

    IF gs_gritem-del = 'X'.
      gs_gritem-color = 'C201'.
    ENDIF.


    MODIFY gt_gritem FROM gs_gritem.
    CLEAR gs_gritem.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_ENABLE_EDIT_MODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_enable_edit_mode .

  " 원래코드 - display_alv_grid 다시 불러오기
  FIELD-SYMBOLS: <fs_fcat> TYPE lvc_s_fcat.


  READ TABLE gt_fcat7 ASSIGNING <fs_fcat>
    WITH KEY fieldname = 'AMOUNT'.

  IF sy-subrc = 0.
    <fs_fcat>-edit = 'X'.
  ELSE.
    APPEND VALUE #( fieldname = 'AMOUNT' edit = '' ) TO gt_fcat7.
  ENDIF.

*  READ TABLE gt_fcat7 ASSIGNING <fs_fcat>
*    WITH KEY fieldname = 'STOID'.
*
*  IF sy-subrc = 0.
*    <fs_fcat>-edit = 'X'.
*  ELSE.
*    APPEND VALUE #( fieldname = 'STOID' edit = '' ) TO gt_fcat7.
*  ENDIF.


  PERFORM display_alv_grid_200.



  " set_ready ... & refresh~

*  FIELD-SYMBOLS: <fs_fcat> TYPE lvc_s_fcat.
*
*  " 1. Field Catalog 수정
*  READ TABLE gt_fcat7 ASSIGNING <fs_fcat>
*    WITH KEY fieldname = 'AMOUNT'.
*  IF sy-subrc = 0.
*    <fs_fcat>-edit = 'X'.
*  ENDIF.
*
*  READ TABLE gt_fcat7 ASSIGNING <fs_fcat>
*    WITH KEY fieldname = 'STOID'.
*  IF sy-subrc = 0.
*    <fs_fcat>-edit = 'X'.
*  ENDIF.
*
**  " 2. 변경된 Field Catalog 적용
**  CALL METHOD go_alv_editgr->set_frontend_fieldcatalog
**    EXPORTING
**      it_fieldcatalog = gt_fcat7.
*
*  " 3. 편집 모드 활성화
*  CALL METHOD go_alv_editgr->set_ready_for_input
*    EXPORTING
*      i_ready_for_input = 1.
*
*  " 4. 화면 리프레시 (스크롤 위치 유지)
*  CALL METHOD go_alv_editgr->refresh_table_display
*    EXPORTING
*      is_stable = VALUE #( row = 'X' col = 'X' ).




*  CALL METHOD go_alv_editgr->set_frontend_fieldcatalog
*    EXPORTING
*      it_fieldcatalog = gt_fcat7.
*
*  " 3. 편집 모드 활성화
*  CALL METHOD go_alv_editgr->set_ready_for_input
*    EXPORTING
*      i_ready_for_input = 1.
*
*  " 4. 화면 리프레시 (스크롤 위치 유지)
*  CALL METHOD go_alv_editgr->refresh_table_display
*    EXPORTING
*      is_stable = VALUE #( row = 'X' col = 'X' ).

*    gv_temp_edit = 1.
*  ENDIF.

*  CALL METHOD go_alv_editgr->set_ready_for_input
*    EXPORTING
*      i_ready_for_input = 1.
*  PERFORM refresh_stable_display CHANGING go_alv_editgr.
*  PERFORM refresh_table_display CHANGING go_alv_editgr.

*  PERFORM display_alv_grid_200.
*
*
*  FIELD-SYMBOLS: <fs_fcat> TYPE lvc_s_fcat.
*
*  " 1. Field Catalog 수정 (이미 하고 있는 것)
*  READ TABLE gt_fcat7 ASSIGNING <fs_fcat>
*    WITH KEY fieldname = 'AMOUNT'.
*  IF sy-subrc = 0.
*    <fs_fcat>-edit = 'X'.
*  ENDIF.
*
*  READ TABLE gt_fcat7 ASSIGNING <fs_fcat>
*    WITH KEY fieldname = 'STOID'.
*  IF sy-subrc = 0.
*    <fs_fcat>-edit = 'X'.
*  ENDIF.
*
*  " 2. 편집 모드 활성화
*  CALL METHOD go_alv_editgr->set_ready_for_input
*    EXPORTING
*      i_ready_for_input = 0.
*
*  " 3. 가볍게 리프레시 (스크롤 위치 유지)
*  CALL METHOD go_alv_editgr->refresh_table_display
*    EXPORTING
*      is_stable = VALUE #( row = 'X' col = 'X' )
*    EXCEPTIONS
*      finished  = 1
*      OTHERS    = 2.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REFRESH_STABLE_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GO_ALV_EDITGR  text
*----------------------------------------------------------------------*
FORM refresh_stable_display  CHANGING co_alv TYPE REF TO cl_gui_alv_grid.


  CALL METHOD co_alv->refresh_table_display
    EXPORTING
      is_stable = VALUE lvc_s_stbl( row = 'X' col = 'X' ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EDIT_DELETE_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_edit_delete_item .
  DATA: lt_row_no TYPE lvc_t_roid,
        ls_row_no TYPE lvc_s_roid,
        lv_answer TYPE c.

  FIELD-SYMBOLS: <fs_item> LIKE LINE OF gt_edit_item.


  CALL METHOD go_alv_editgr->get_selected_rows
    IMPORTING
      et_row_no = lt_row_no.

  IF lt_row_no IS INITIAL.
    MESSAGE i999(zmcss) WITH '삭제할 행을 선택하세요!'.
    RETURN.
  ENDIF.


  PERFORM confirm_deletion
    USING    '선택한 행을 삭제하시겠습니까?'
    CHANGING lv_answer.

  CHECK lv_answer = '1'.

  SORT lt_row_no BY row_id DESCENDING.

  LOOP AT lt_row_no INTO ls_row_no.
    READ TABLE gt_edit_item INDEX ls_row_no-row_id ASSIGNING <fs_item>.
    IF sy-subrc = 0.
      <fs_item>-del   = 'X'.
      <fs_item>-color = 'C601'.
    ENDIF.
  ENDLOOP.

  PERFORM refresh_stable_display CHANGING go_alv_editgr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EDIT_DELETE_ALL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_edit_delete_all .

  DATA: lv_answer TYPE c.

  FIELD-SYMBOLS: <fs_item> LIKE LINE OF gt_edit_item.

  PERFORM confirm_deletion
    USING    '모든 데이터를 삭제하시겠습니까?'
    CHANGING lv_answer.

  IF lv_answer = 1.
    LOOP AT gt_edit_item ASSIGNING <fs_item>.
      <fs_item>-del   = 'X'.
      <fs_item>-color = 'C601'.
    ENDLOOP.
  ENDIF.

  PERFORM refresh_stable_display CHANGING go_alv_editgr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CONFIRM_DELETION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1737   text
*      <--P_LV_ANSWER  text
*----------------------------------------------------------------------*
FORM confirm_deletion  USING    VALUE(pv_qst) TYPE string
                       CHANGING cv_ans TYPE c.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar       = '삭제 확인'
      text_question  = pv_qst
      text_button_1  = '예'
      text_button_2  = '아니오'
      default_button = '2'
    IMPORTING
      answer         = cv_ans
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW_ID_INDEX  text
*      -->P_E_COLUMN_ID_FIELDNAME  text
*      -->P_SENDER  text
*----------------------------------------------------------------------*
FORM handle_hotspot  USING pv_index TYPE lvc_index
                           pv_field TYPE lvc_fname
                           p_sender TYPE REF TO cl_gui_alv_grid.


  CASE p_sender.
    WHEN go_alv_gr_list.
      PERFORM handle_grlist_hotspot USING pv_index.
    WHEN go_alv_editgr.
      PERFORM handle_editgr_hotspot USING pv_index.
    WHEN go_alv_polist.
    WHEN go_alv_exp_list.
      PERFORM handle_explist_hotspot USING pv_index.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EDITGR_HOTSPOT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_INDEX  text
*----------------------------------------------------------------------*
FORM handle_editgr_hotspot  USING pv_index TYPE lvc_index.

  DATA: lv_venid TYPE ztssvend-venid.

  READ TABLE gt_edit_item INTO gs_edit_item INDEX pv_index.
  CHECK sy-subrc = 0.

  SELECT SINGLE venid
    INTO lv_venid
    FROM ztsspoh
    WHERE ponum = gs_edit_item-ponum.

  " sy-subrc 가 0 이 아니면 종료
  CHECK sy-subrc = 0.

  PERFORM fetch_po_items_for_confirm USING gs_edit_item-ponum lv_venid.

  PERFORM refresh_table_display CHANGING go_alv_polist.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FETCH_PO_ITEMS_FOR_CONFIRM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_EDIT_ITEM_PONUM  text
*      -->P_LV_VENID  text
*----------------------------------------------------------------------*
FORM fetch_po_items_for_confirm  USING pv_ponum TYPE ztsspoh-ponum
                                       pv_venid TYPE ztssvend-venid.

  DATA: lt_gr_sum LIKE TABLE OF gs_itamt.

  SELECT ponum itnum amount meins pomnr
    FROM ztsspoi
    INTO CORRESPONDING FIELDS OF TABLE gt_confirm
    WHERE ponum = pv_ponum.

  " sy-subrc 가 0 이 아니면 종료
  CHECK sy-subrc = 0.

  " Gr의 sum 구하기 (po번호로)
  PERFORM get_gr_sum_by_po  USING   pv_ponum CHANGING lt_gr_sum.

  PERFORM modify_confirm_data USING pv_venid lt_gr_sum.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GR_SUM_BY_PO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_PONUM  text
*      <--P_LT_GR_SUM  text
*----------------------------------------------------------------------*
FORM get_gr_sum_by_po  USING    iv_ponum  TYPE ztsspoh-ponum
                       CHANGING ct_gr_sum LIKE gt_itamt.

  DATA: lt_gr_raw TYPE STANDARD TABLE OF ztssgri,
        ls_gr_raw LIKE LINE OF lt_gr_raw,
        ls_gr_sum LIKE gs_itamt.

  CLEAR ct_gr_sum.
  REFRESH ct_gr_sum.

  SELECT ponum itnum amount
    INTO CORRESPONDING FIELDS OF TABLE lt_gr_raw
    FROM ztssgri
    WHERE ponum = iv_ponum.

  CHECK sy-subrc = 0.

  " Sum 구하기
  LOOP AT lt_gr_raw INTO ls_gr_raw.
    ls_gr_sum-ponum  = ls_gr_raw-ponum.
    ls_gr_sum-itnum  = ls_gr_raw-itnum.
    ls_gr_sum-amount = ls_gr_raw-amount.
    COLLECT ls_gr_sum INTO ct_gr_sum.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFY_CONFIRM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_VENID  text
*      -->P_LT_GR_SUM  text
*----------------------------------------------------------------------*
FORM modify_confirm_data  USING pv_venid   TYPE ztssvend-venid
                                pt_gr_sum  LIKE gt_itamt.

  DATA: ls_gr_sum LIKE gs_itamt.

  FIELD-SYMBOLS: <fs_confirm> LIKE LINE OF gt_confirm.

  LOOP AT gt_confirm ASSIGNING <fs_confirm>.

    <fs_confirm>-venid = pv_venid.

    PERFORM get_vendor_name
      USING    pv_venid
      CHANGING <fs_confirm>-vname.

    PERFORM get_mat_name
      USING    <fs_confirm>-pomnr
      CHANGING <fs_confirm>-matnm.

    " GR 수량구하기
    READ TABLE pt_gr_sum INTO ls_gr_sum
      WITH KEY ponum = <fs_confirm>-ponum
               itnum = <fs_confirm>-itnum.

    IF sy-subrc = 0.
      <fs_confirm>-grqty = ls_gr_sum-amount.
    ELSE.
      <fs_confirm>-grqty = 0.
    ENDIF.

  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DETAIL_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_detail_info .


  DATA: lt_row_no TYPE lvc_t_roid,
        ls_row_no TYPE lvc_s_roid,      " lvc_s_row → lvc_s_roid
        lv_venid  TYPE ztssvend-venid,
        lt_item   LIKE gt_item,
        ls_data   LIKE LINE OF gt_grdata,
        lv_index  TYPE lvc_index.

  CLEAR gv_subrc.

  PERFORM get_selected_rows_one USING go_alv_gr_list CHANGING lt_row_no gv_subrc.
  IF gv_subrc <> 0. RETURN. ENDIF.

  " 선택된 행 데이터 읽기
  READ TABLE lt_row_no INTO ls_row_no INDEX 1.

  lv_index = ls_row_no-row_id.
  READ TABLE gt_grdata INTO ls_data INDEX ls_row_no-row_id.
  MOVE-CORRESPONDING ls_data TO zsssmm0211.
*  IF gt_gritem IS INITIAL.
  PERFORM get_gr_item_detail USING lv_index.
  PERFORM get_gr_item_list USING lv_index. " class에서 씀
*  ENDIF.

  PERFORM get_vendor_details USING ls_data-venid CHANGING zsssmm0218.
  PERFORM get_vendor_price USING ls_data-venid CHANGING gt_vnprc.
  PERFORM get_emp_details USING ls_data-rgtor CHANGING zsssmm0220.


  CALL SCREEN '0300'.
*  PERFORM display_alv_grid_0300.

*  CLEAR gt_gritem.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_VNAME_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PS_ROW  text
*----------------------------------------------------------------------*
FORM handle_vname_click   USING ps_row     TYPE lvc_s_row.


  DATA : ls_grdata LIKE LINE OF gt_grdata,
         lv_grnum  TYPE ztssgri-grnum.

  READ TABLE gt_grdata INTO ls_grdata INDEX ps_row-index.
  PERFORM get_vendor_details USING ls_grdata-venid CHANGING zsssmm0218.


  CALL SCREEN 0120 STARTING AT 20 20.
  CLEAR zsssmm0218.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EMP_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PS_ROW  text
*----------------------------------------------------------------------*
FORM handle_emp_click  USING ps_row     TYPE lvc_s_row.


  DATA : ls_grdata LIKE LINE OF gt_grdata.

  READ TABLE gt_grdata INTO ls_grdata INDEX ps_row-index.
  PERFORM get_emp_details USING ls_grdata-rgtor CHANGING zsssmm0220.

  CALL SCREEN 0140 STARTING AT 20 20.
  CLEAR zsssmm0220.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EDITGR_CHANGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_DATA_CHANGED  text
*      -->P_LS_CELL  text
*----------------------------------------------------------------------*
FORM handle_editgr_change   USING p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                                  ps_cell        LIKE LINE OF p_data_changed->mt_good_cells.

  DATA: lv_orqty      TYPE p,
        lv_ponum      TYPE ztsspoi-ponum,
        lv_itnum      TYPE ztsspoi-itnum,
        lv_grnum      TYPE ztssgrh-grnum,
        lv_po_amt     TYPE ztsspoi-amount,
        lv_gr_qty     TYPE p,
        lv_one_gr_qty TYPE p.

  READ TABLE gt_edit_item INTO gs_edit_item INDEX ps_cell-row_id.
  CHECK sy-subrc = 0.

  CASE ps_cell-fieldname.
    WHEN 'AMOUNT'.
      PERFORM get_cell_value  USING    p_data_changed ps_cell-row_id 'AMOUNT'
                              CHANGING lv_orqty.

      PERFORM get_cell_value  USING    p_data_changed ps_cell-row_id 'PONUM'
                              CHANGING lv_ponum.

      PERFORM get_cell_value  USING    p_data_changed ps_cell-row_id 'ITNUM'
                              CHANGING lv_itnum.

      PERFORM validate_editgr_amount  USING    p_data_changed ps_cell lv_orqty lv_ponum lv_itnum
                                      CHANGING gs_edit_item.

  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_EDITGR_AMOUNT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_DATA_CHANGED  text
*      -->P_PS_CELL  text
*      -->P_LV_ORQTY  text
*      -->P_LV_PONUM  text
*      -->P_LV_ITNUM  text
*      <--P_GS_EDIT_ITEM  text
*----------------------------------------------------------------------*
FORM validate_editgr_amount  USING  p_data_changed TYPE REF TO cl_alv_changed_data_protocol
                                    ps_cell        LIKE LINE OF p_data_changed->mt_good_cells
                                    pv_orqty       TYPE p
                                    pv_ponum       TYPE ztsspoi-ponum
                                    pv_itnum       TYPE ztsspoi-itnum
                             CHANGING cs_edit_item   LIKE gs_edit_item.


  DATA: lv_grnum      TYPE ztssgrh-grnum,
        lv_po_amt     TYPE ztsspoi-amount,
        lv_gr_qty     TYPE p,
        lv_one_gr_qty TYPE p,
        lv_available  TYPE p.

  lv_grnum = zsssmm0211-grnum.

  " PO 에서 개수 구하기
  SELECT SINGLE amount
    INTO lv_po_amt
    FROM ztsspoi
    WHERE ponum = pv_ponum
      AND itnum = pv_itnum.

  CHECK sy-subrc = 0.

  " 전체 GR 양구하기
  PERFORM calculate_gr_quantities USING    pv_ponum pv_itnum lv_grnum
                                  CHANGING lv_gr_qty
                                           lv_one_gr_qty.

  lv_available = lv_po_amt - lv_gr_qty + lv_one_gr_qty.

  IF pv_orqty > lv_available.
    MESSAGE s999(zmcss) WITH pv_orqty '는 유효하지 않습니다(PO 수량 초과!)' DISPLAY LIKE 'W'.
    RETURN.
  ENDIF.

  cs_edit_item-amount = pv_orqty.
  MODIFY gt_edit_item FROM cs_edit_item INDEX ps_cell-row_id.

  p_data_changed->modify_cell(
    EXPORTING
      i_row_id    = ps_cell-row_id
      i_tabix     = ps_cell-tabix
      i_fieldname = ps_cell-fieldname
      i_value     = pv_orqty
  ).

  MESSAGE s999(zmcss) WITH '입고수량이 변경되었습니다:' pv_orqty.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CALCULATE_GR_QUANTITIES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_PONUM  text
*      -->P_PV_ITNUM  text
*      -->P_LV_GRNUM  text
*      <--P_LV_GR_QTY  text
*      <--P_LV_ONE_GR_QTY  text
*----------------------------------------------------------------------*
FORM calculate_gr_quantities  USING    pv_ponum      TYPE ztsspoi-ponum
                                       pv_itnum      TYPE ztsspoi-itnum
                                       pv_grnum      TYPE ztssgrh-grnum
                              CHANGING cv_total_qty  TYPE p
                                       cv_cur_qty TYPE p.
  CLEAR: cv_total_qty,
         cv_cur_qty.

  " 모든 gr아이템 - 수량 가져오기!
  SELECT grnum ponum itnum amount
    FROM ztssgri
    INTO CORRESPONDING FIELDS OF TABLE gt_gri
    WHERE ponum = pv_ponum
      AND itnum = pv_itnum.

  IF sy-subrc <> 0. RETURN. ENDIF.

  " GR에 있는 '수량' 구하기
  LOOP AT gt_gri INTO gs_gri.
    cv_total_qty = cv_total_qty + gs_gri-amount.
  ENDLOOP.

  " 현재 GRNUM에 있는 수량만 구하기
  LOOP AT gt_gri INTO gs_gri WHERE grnum = pv_grnum.
    cv_cur_qty = cv_cur_qty + gs_gri-amount.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_EXPLIST_HOTSPOT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_INDEX  text
*----------------------------------------------------------------------*
FORM handle_explist_hotspot  USING pv_index TYPE lvc_index.

  CLEAR gt_expitem.
  DATA: lv_venid TYPE ztssvend-venid.
  DATA : lt_item LIKE gt_expitem,
         ls_item LIKE LINE OF lt_item.
*
  DATA : ls_expdata LIKE LINE OF gt_expdata.

  READ TABLE gt_expdata INTO ls_expdata INDEX pv_index.
  CHECK sy-subrc = 0.

  READ TABLE gt_expitem INTO ls_item WITH  KEY ponum = ls_expdata-ponum.
  IF sy-subrc = 0.
    MESSAGE i999(zmcss) WITH '이미 추가된 po번호입니다!'.
    PERFORM refresh_table_display CHANGING go_alv_exp_list.
    PERFORM refresh_table_display CHANGING go_alv_exp_item.
    RETURN.
  ENDIF.

  SELECT ponum itnum amount meins pomnr
  FROM ztsspoi
  INTO CORRESPONDING FIELDS OF TABLE lt_item
  WHERE ponum = ls_expdata-ponum.

*  PERFORM fetch_add_poitems USING lt_row_no lv_venid CHANGING lt_item.

*  PERFORM get_item_data USING lv_venid CHANGING lt_item.
  PERFORM get_exp_item_data USING ls_expdata-venid CHANGING lt_item.


  APPEND LINES OF lt_item TO gt_expitem.
*  PERFORM renumber_gr_number.


*  PERFORM fetch_po_items_for_confirm USING gs_edit_item-ponum lv_venid.

  PERFORM refresh_table_display CHANGING go_alv_exp_list.
  PERFORM refresh_table_display CHANGING go_alv_exp_item.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_EXP_ITEM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_ITEM  text
*----------------------------------------------------------------------*
FORM get_exp_item_data    USING VALUE(p_venid) TYPE ztssvend-venid
                          CHANGING ct_item LIKE gt_expitem.

  DATA : lt_grsum LIKE TABLE OF gs_itamt,
         ls_grsum LIKE gs_itamt.

  FIELD-SYMBOLS: <fs_item> LIKE LINE OF ct_item.
  PERFORM get_gr_sum CHANGING lt_grsum.

  LOOP AT ct_item ASSIGNING <fs_item>.

    IF <fs_item>-venid IS INITIAL.
      <fs_item>-venid = p_venid.
    ENDIF.
    PERFORM get_vendor_name USING <fs_item>-venid CHANGING <fs_item>-vname.
    PERFORM get_mat_name USING <fs_item>-pomnr CHANGING <fs_item>-matnm.

    READ TABLE lt_grsum INTO ls_grsum WITH KEY ponum = <fs_item>-ponum
                                               itnum = <fs_item>-itnum.

    IF sy-subrc = 0. <fs_item>-grqty = ls_grsum-amount. ENDIF.
    <fs_item>-reqty = <fs_item>-amount - <fs_item>-grqty.
    IF <fs_item>-stoid IS INITIAL. <fs_item>-stoid = 'SL01'. ENDIF.

    IF <fs_item>-reqty <>  0.
      DATA ls_col TYPE lvc_s_scol.


      ls_col-fname = 'REQTY'.
      ls_col-color-col = '7'.
      ls_col-color-int = '1'.
      ls_col-color-inv = '1'.
      APPEND ls_col TO <fs_item>-it_col.
      <fs_item>-color = 'C601'.
      <fs_item>-light = 1.
    ELSEIF <fs_item>-amount > <fs_item>-reqty.
      <fs_item>-light = 3.
    ELSE.
      <fs_item>-light = 3.


    ENDIF.


    PERFORM get_storage_name USING <fs_item>-stoid CHANGING <fs_item>-stonm.

  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_PO_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_T_DATA  text
*----------------------------------------------------------------------*
FORM set_po_status  CHANGING cs_data LIKE gs_podata.

  DATA : lt_grdata LIKE TABLE OF zsssmm0213.

  SELECT  ponum
    INTO CORRESPONDING FIELDS OF TABLE lt_grdata
    FROM ztssgri
    WHERE ponum = cs_data-ponum
    AND del <> 'X'.
  READ TABLE lt_grdata ASSIGNING FIELD-SYMBOL(<fs_cnt>) WITH KEY ponum = cs_data-ponum.
  IF sy-subrc = 0.
    cs_data-light = '2'.
  ELSE.
    cs_data-light = '3'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DUDAT_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PS_ROW  text
*----------------------------------------------------------------------*
FORM handle_dudat_click  USING ps_row     TYPE lvc_s_row.

  DATA : ls_podata LIKE LINE OF gt_podata.
  DATA : lv_temp_date TYPE int4,
         lv_abs       TYPE int4.

  READ TABLE gt_podata INTO ls_podata INDEX ps_row-index.

  lv_temp_date = ls_podata-dudat - sy-datum.
  lv_abs = abs( lv_temp_date ).
  IF lv_temp_date < 3 AND lv_temp_date > 0.

    MESSAGE s999(zmcss) WITH '납기일이 얼마남지 않았습니다!' lv_temp_date '일'.
  ELSEIF lv_temp_date = 0.
    MESSAGE s999(zmcss) WITH sy-datum ': 납기일 만료일입니다!'.
  ELSEIF lv_temp_date < 0.
    MESSAGE s999(zmcss) WITH '납기일이 지났습니다!' lv_abs '일'.

  ELSE.
    MESSAGE s999(zmcss) WITH '납기일 남은 일수 : ' lv_temp_date '일'.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DELETE_CONFIRM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_delete_confirm .

  DATA: lt_row_no TYPE lvc_t_roid,
        ls_row_no TYPE lvc_s_roid,
        lv_index  TYPE sy-tabix.

  CLEAR gv_msg.

  CALL METHOD go_alv_po_confirm->get_selected_rows
    IMPORTING
      et_row_no = lt_row_no.

  IF lt_row_no IS INITIAL.
    MESSAGE i999(zmcss) WITH '삭제할 행을 선택하세요'.
    RETURN.
  ENDIF.

  LOOP AT lt_row_no INTO ls_row_no.
    lv_index = ls_row_no-row_id.
    READ TABLE gt_confirm INTO DATA(ls_confirm) INDEX lv_index.
    IF sy-subrc = 0.
      LOOP AT gt_item ASSIGNING FIELD-SYMBOL(<fs_item>)
                   WHERE ponum = ls_confirm-ponum
                   AND itnum = ls_confirm-itnum.
        <fs_item>-orqty = 0.
      ENDLOOP.
    ENDIF.

    DELETE gt_confirm INDEX lv_index.
  ENDLOOP.



  PERFORM renumber_confirm_number.



  PERFORM refresh_alv_0102.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RENUMBER_CONFIRM_NUMBER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM renumber_confirm_number .

  DATA : lv_grseq TYPE n LENGTH 3 VALUE '001'.

  FIELD-SYMBOLS : <fs_item> LIKE LINE OF gt_confirm.

  LOOP AT gt_confirm ASSIGNING <fs_item>.
    <fs_item>-grseq = lv_grseq.
    lv_grseq = lv_grseq + 1.
  ENDLOOP.

  gv_seqnum = lv_grseq - 1.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_NODE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*      -->P_SENDER  text
*----------------------------------------------------------------------*
FORM handle_node_double_click  USING    p_node.

  DATA : lv_venid TYPE ztssvend-venid,
         lv_vname TYPE ztssvend-vname,
         lv_year  TYPE numc4.

  CASE p_node.
    WHEN '1000'.
    WHEN '2000'.
    WHEN OTHERS.
*      CLEAR gt_vdudat.
*      lv_venid = p_node.
*      READ TABLE gt_vendor INTO DATA(ls_vendor) WITH KEY venid = lv_venid.
*      IF sy-subrc = 0.
*        lv_vname = ls_vendor-vname.
*        PERFORM get_exp_detail_data USING lv_venid.
*        PERFORM refresh_alv_0400.
*      ENDIF.

      CLEAR gt_vdudat.

      " node_key에서 연도와 업체코드 분리
      IF p_node(4) = '2024'.
        lv_year = '2024'.
        lv_venid = p_node+4.  " 2024V001 → V001
      ELSEIF p_node(4) = '2025'.
        lv_year = '2025'.
        lv_venid = p_node+4.  " 2025V001 → V001
      ELSE.
        " 이상한 노드면 그냥 리턴
        RETURN.
      ENDIF.

      PERFORM get_vendor_name USING lv_venid CHANGING lv_vname.
*      IF sy-subrc = 0.
      PERFORM get_exp_detail_data USING lv_venid lv_year.
      PERFORM refresh_alv_0400.
*      ENDIF.


  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_EXP_DETAIL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_VENID  text
*----------------------------------------------------------------------*
FORM get_exp_detail_data  USING    pv_venid TYPE ztssvend-venid
                                   pv_year TYPE numc4.



  DATA : lt_po_sum LIKE TABLE OF gs_itamt,
         lt_gr_sum LIKE TABLE OF gs_itamt.


  CLEAR gt_podata.

  PERFORM get_posum_by_venid USING pv_venid pv_year CHANGING lt_po_sum.
  PERFORM get_grsum_by_venid USING pv_venid pv_year CHANGING lt_gr_sum.

  PERFORM create_expdudat USING lt_po_sum lt_gr_sum pv_venid CHANGING gt_vdudat.
  PERFORM calculate_delay_rate USING lt_po_sum.
  PERFORM modify_expdudat TABLES gt_vdudat.
*  PERFORM get_posum_by_venid USING pv_venid CHANGING gt_vdudat.
*  PERFORM get_grsum_by_venid USING pv_venid CHANGING gt_vdudat.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_POSUM_BY_VENID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_VENID  text
*      <--P_GT_VDUDAT  text
*----------------------------------------------------------------------*
FORM get_posum_by_venid  USING    pv_venid TYPE ztssvend-venid
                                  pv_year TYPE numc4
                         CHANGING ct_data LIKE gt_itamt.

  DATA: lv_date_from TYPE ztsspoh-dudat,
        lv_date_to   TYPE ztsspoh-dudat.
  lv_date_from = |{ pv_year }0101|.
  lv_date_to   = |{ pv_year }1231|.

  SELECT i~ponum i~itnum
         SUM( i~amount ) AS amount
    INTO CORRESPONDING FIELDS OF TABLE ct_data
    FROM ztsspoi AS i
    INNER JOIN ztsspoh AS h ON i~ponum = h~ponum
    WHERE h~venid = pv_venid
    AND h~dudat BETWEEN lv_date_from AND lv_date_to
    GROUP BY i~ponum i~itnum.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GRSUM_BY_VENID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_VENID  text
*      <--P_GT_VDUDAT  text
*----------------------------------------------------------------------*
FORM get_grsum_by_venid  USING    pv_venid TYPE ztssvend-venid
                                  pv_year TYPE numc4
                         CHANGING ct_data LIKE gt_itamt.


  DATA: lt_gr_raw    TYPE TABLE OF ztssgri,
        ls_gr_raw    LIKE LINE OF lt_gr_raw,
        ls_gr_sum    LIKE gs_itamt,
        lv_date_from TYPE ztsspoh-dudat,
        lv_date_to   TYPE ztsspoh-dudat.

  " 연도 범위 설정
  lv_date_from = |{ pv_year }0101|.
  lv_date_to   = |{ pv_year }1231|.

  SELECT i~ponum i~itnum i~amount
    INTO CORRESPONDING FIELDS OF TABLE lt_gr_raw
    FROM ztssgri AS i
    INNER JOIN ztsspoh AS h ON i~ponum = h~ponum
    WHERE h~venid = pv_venid
    AND h~dudat BETWEEN lv_date_from AND lv_date_to
    GROUP BY i~ponum i~itnum i~amount.

  LOOP AT lt_gr_raw INTO ls_gr_raw.
    ls_gr_sum-ponum  = ls_gr_raw-ponum.
    ls_gr_sum-itnum  = ls_gr_raw-itnum.
    ls_gr_sum-amount = ls_gr_raw-amount.
    COLLECT ls_gr_sum INTO ct_data.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREATE_EXPDUDAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_PO_SUM  text
*      -->P_LT_GR_SUM  text
*      <--P_GT_VDUDAT  text
*----------------------------------------------------------------------*
FORM create_expdudat  USING    pt_po_sum LIKE gt_itamt
                               pt_gr_sum LIKE gt_itamt
                               pv_venid TYPE ztssvend-venid
                      CHANGING ct_data LIKE gt_vdudat.


  DATA: ls_po_sum LIKE gs_itamt,
        ls_gr_sum LIKE gs_itamt,
        ls_data   LIKE LINE OF ct_data,
        ls_po     LIKE LINE OF gt_vdudat.

  DATA: BEGIN OF ls_grdata,
          grnum  TYPE ztssgrh-grnum,
          grdat  TYPE ztssgrh-grdat,
          ponum  TYPE ztssgri-ponum,
          itnum  TYPE ztssgri-itnum,
          stoid  TYPE ztssgri-stoid,
          amount TYPE ztssgri-amount,
          meins  TYPE ztssgri-meins,
        END OF ls_grdata.

  DATA: lv_total_cnt  TYPE i,
        lv_delay_cnt  TYPE i,
        lv_delay_rate TYPE p DECIMALS 2.

  LOOP AT pt_po_sum INTO ls_po_sum.
    CLEAR: ls_po, ls_grdata.

    " PO 데이터 조회
    SELECT SINGLE h~ponum h~venid h~dudat i~itnum i~pomnr
                  i~amount i~meins i~plant
      INTO CORRESPONDING FIELDS OF ls_po
      FROM ztsspoh AS h
      INNER JOIN ztsspoi AS i ON h~ponum = i~ponum
      WHERE h~ponum = ls_po_sum-ponum
        AND h~venid = pv_venid
        AND i~itnum = ls_po_sum-itnum.

    " 납기일이 지나지 않았으면 스킵
    IF ls_po-dudat >= sy-datum.
      CONTINUE.
    ENDIF.

    " GR 데이터 조회
    SELECT SINGLE h~grdat h~grnum i~grnum i~ponum i~itnum
                  i~stoid i~amount i~meins
      INTO CORRESPONDING FIELDS OF ls_grdata
      FROM ztssgrh AS h
      INNER JOIN ztssgri AS i ON h~grnum = i~grnum
      WHERE i~ponum = ls_po_sum-ponum
        AND i~itnum = ls_po_sum-itnum.

    " GR 데이터가 있으면 GR sum도 가져오기
    READ TABLE pt_gr_sum INTO ls_gr_sum WITH KEY ponum = ls_po_sum-ponum
                                                 itnum = ls_po_sum-itnum.

    " 케이스 1: 입고가 전혀 안 된 경우
    IF sy-subrc <> 0.
      ls_po-stoid = 'SL01'.
      ls_po-reqty = ls_po-amount.
      ls_po-ludat = sy-datum - ls_po-dudat.
      APPEND ls_po TO ct_data.

      " 케이스 2: 부분 입고된 경우 (입고량 < 주문량)
    ELSEIF ls_gr_sum-amount < ls_po-amount.
      ls_po-stoid = ls_grdata-stoid.
      ls_po-grdat = ls_grdata-grdat.
      ls_po-reqty = ls_po-amount - ls_gr_sum-amount.

      " 입고일이 납기일보다 늦은 경우
      IF ls_grdata-grdat > ls_po-dudat.
        ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
      ELSE.
        " 아직 입고 안 된 나머지에 대한 지연
        ls_po-ludat = sy-datum - ls_po-dudat.
      ENDIF.

      APPEND ls_po TO ct_data.

      " 케이스 3: 완전 입고되었지만 납기일보다 늦게 입고된 경우
    ELSEIF ls_grdata-grdat > ls_po-dudat.
      ls_po-stoid = ls_grdata-stoid.
      ls_po-grdat = ls_grdata-grdat.
      ls_po-reqty = 0.  " 전체 수량
      ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
      APPEND ls_po TO ct_data.
    ENDIF.

  ENDLOOP.

  " 지연율 계산 (LOOP 밖에서 한 번만)
*  lv_total_cnt = lines( pt_po_sum ).
*  lv_delay_cnt = lines( ct_data ).
*
*  IF lv_total_cnt > 0.
*    lv_delay_rate = ( lv_delay_cnt / lv_total_cnt ) * 100.
*    gv_delay_rate = lv_delay_rate.
*
*    " 모든 라인에 지연율 추가
*    LOOP AT ct_data ASSIGNING FIELD-SYMBOL(<fs_data>).
*      <fs_data>-duded = lv_delay_rate.
*    ENDLOOP.
*  ENDIF.



*  DATA: ls_po_sum LIKE gs_itamt,
*        ls_gr_sum LIKE gs_itamt,
*        ls_data   LIKE LINE OF ct_data,
*        ls_po     LIKE LINE OF gt_vdudat.
*
*  DATA : BEGIN OF ls_grdata,
*           grnum  TYPE ztssgrh-grnum,
*           grdat  TYPE ztssgrh-grdat,
*           ponum  TYPE ztssgri-ponum,
*           itnum  TYPE ztssgri-itnum,
*           stoid  TYPE ztssgri-stoid,
*           amount TYPE ztssgri-amount,
*           meins  TYPE ztssgri-meins,
*         END OF ls_grdata.
*
*  DATA: lv_total_cnt  TYPE i,           "전체 PO 건수
*        lv_delay_cnt  TYPE i,           "지연 건수
*        lv_delay_rate TYPE p DECIMALS 2. "지연율
*
*  LOOP AT pt_po_sum INTO ls_po_sum.
*    CLEAR ls_po.
*
*    SELECT SINGLE h~ponum h~venid h~dudat i~itnum i~pomnr i~amount i~meins i~plant i~pomnr
*      INTO CORRESPONDING FIELDS OF ls_po
*      FROM ztsspoh AS h
*      INNER JOIN ztsspoi AS i
*      ON h~ponum = i~ponum
*      WHERE h~ponum = ls_po_sum-ponum
*      AND h~venid = pv_venid
*      AND i~itnum = ls_po_sum-itnum.
*
*
*    SELECT SINGLE h~grdat h~grnum i~grnum i~ponum i~itnum i~stoid i~amount i~meins
*      INTO CORRESPONDING FIELDS OF ls_grdata
*      FROM ztssgrh AS h
*      INNER JOIN ztssgri AS i
*      ON h~grnum = i~grnum
*      WHERE i~ponum = ls_po_sum-ponum
*      AND i~itnum = ls_po_sum-itnum.
*
*    ls_po-stoid = 'SL01'.
*    " GR에 진짜 없을때 - 하나도 입고 X
*    IF sy-subrc <> 0.
*
*      IF ls_po-dudat < sy-datum.
*        ls_po-reqty = ls_po-amount.
*        ls_po-ludat = sy-datum - ls_po-dudat.
*        APPEND ls_po TO ct_data.
*      ENDIF.
*    ENDIF.
*    " 부분입고는 되었지만 개수가 다를때
**
*
**    ls_po-stoid = ls_grdata-stoid.
**    ls_po-reqty = ls_po-amount = ls_grdata-amount.
**
**
**    IF ls_grdata-grdat > ls_po-dudat.
**      IF ls_grdata-grdat IS NOT INITIAL.
**        ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
**      ELSE.
**        ls_po-ludat = sy-datum - ls_po-dudat.
**      ENDIF.
**      APPEND ls_po TO ct_data.
**    ENDIF.
**
*    " 부분입고는 되었지만 개수가 다를 때. 부분입고는 되었지만 날짜가 늘어났을 때
*    READ TABLE pt_gr_sum INTO ls_gr_sum WITH KEY ponum = ls_po_sum-ponum
*                                                 itnum = ls_po_sum-itnum.
*
*    IF sy-subrc = 0 AND ls_gr_sum-amount <> ls_po-amount.
**      IF ls_po-dudat < sy-datum.
**        ls_po-reqty = ls_po-amount - ls_gr_sum-amount.
**        ls_po-ludat = sy-datum - ls_po-dudat.
**        APPEND ls_po TO ct_data.
*      IF ls_po-dudat < ls_grdata-grdat.
*        ls_po-reqty = ls_po-amount - ls_gr_sum-amount.
*        ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
*        APPEND ls_po TO ct_data.
*      ENDIF.
*    ENDIF.
*
**  "==================== 납기지연율 계산 ====================
*    lv_total_cnt = lines( pt_po_sum ).        "전체 PO 건수
*    lv_delay_cnt = lines( ct_data ).          "지연된 건수
*
*    IF lv_total_cnt > 0.
*      lv_delay_rate = ( lv_delay_cnt / lv_total_cnt ) * 100.
*      ls_po-duded = lv_delay_rate.
*      gv_delay_rate = lv_delay_rate.
*
*      LOOP AT ct_data ASSIGNING FIELD-SYMBOL(<fs_data>).
*        <fs_data>-duded = lv_delay_rate.
*      ENDLOOP.
*    ENDIF.
*    "========================================================
**    IF sy-subrc <> 0.
**      IF ls_grdata-grdat IS NOT INITIAL.
**        ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
**      ELSE.
**        ls_po-ludat = sy-datum - ls_po-dudat.
**      ENDIF.
**      APPEND ls_po TO ct_data.
**    ELSEIF ls_gr_sum-amount < ls_po_sum-amount.
**      IF ls_grdata-grdat IS NOT INITIAL.
**        ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
**      ELSE.
**        ls_po-ludat = sy-datum - ls_po-dudat.
**      ENDIF.
**      APPEND ls_po TO ct_data.
**    ELSE.
**      ls_po-grdat = ls_grdata-grdat.
**
**    ENDIF.
**    ls_po-grdat = ls_grdata-grdat.
**
**    IF ls_grdata-grdat IS NOT INITIAL.
**      ls_po-ludat = ls_grdata-grdat - ls_po-dudat.
**    ELSE.
**      ls_po-ludat = sy-datum - ls_po-dudat.
**    ENDIF.
**
**    WRITE '/'.
**
**    IF sy-subrc <> 0.
**      READ TABLE ct_data TRANSPORTING NO FIELDS  WITH KEY ponum = ls_po_sum-ponum.
**      IF sy-subrc <> 0.
**        APPEND ls_po TO ct_data.
**      ENDIF.
***     IF ls_po_sum-dudat < ls_gr_sum-
**    ENDIF.


*ENDLOOP.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FCAT_0101
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_fcat_0101 .

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFY_EXPDUDAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_VDUDAT  text
*----------------------------------------------------------------------*
FORM modify_expdudat  TABLES   t_data STRUCTURE gs_vdudat.

  DATA : ls_color TYPE lvc_s_scol.

  LOOP AT t_data.
*    t_data-duded = gv_delay_rate.
    PERFORM get_vendor_name USING t_data-venid CHANGING t_data-vname.
    PERFORM get_mat_name USING t_data-pomnr CHANGING t_data-matnm.
    PERFORM get_storage_name USING t_data-stoid CHANGING t_data-stonm.
    PERFORM get_plant_name USING t_data-plant CHANGING t_data-pname.

    CLEAR ls_color.
    ls_color-fname = 'DUDED'.
    ls_color-color-col = 6.
    ls_color-color-int = 0.
    ls_color-color-inv = 0.
    APPEND ls_color TO t_data-it_col.
    ls_color-fname = 'REQTY'.     " 필드명
    ls_color-color-col = 5.
    ls_color-color-int = 0.
    ls_color-color-inv = 0.
    APPEND ls_color TO t_data-it_col.
    MODIFY t_data.
    CLEAR t_data.

  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_GRLIST_HOTSPOT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PV_INDEX  text
*----------------------------------------------------------------------*
FORM handle_grlist_hotspot  USING pv_index TYPE lvc_index.

  REFRESH gt_gritem.  " ← 추가
  CLEAR gt_gritem.    " ← 추가
  DATA : ls_grdata LIKE LINE OF gt_grdata.

  READ TABLE gt_grdata INTO ls_grdata  INDEX pv_index.

  " 함수 그대로 복사해오기
*  IF gt_gritem IS INITIAL.
  PERFORM get_gr_item_list USING pv_index .
*  ENDIF.
  MOVE-CORRESPONDING ls_grdata TO zsssmm0211.
  MOVE-CORRESPONDING ls_grdata TO gs_cond2.
  MOVE-CORRESPONDING gt_gritem TO gt_edit_item.
*  LOOP AT gt_edit_item ASSIGNING FIELD-SYMBOL(<fs_eitem>).
*    IF <fs_eitem>-del = 'X'.
*      <fs_eitem>-color = 'C201'.
*    ENDIF.
*  ENDLOOP.
  CALL SCREEN '0310'.

  PERFORM display_alv_grid_0310.
*  CLEAR gt_gritem.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CALLED_EXE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM called_exe .

  CLEAR gv_call_num.
  GET PARAMETER ID 'ZSSGR' FIELD gv_call_num.
  IF gv_call_num IS NOT INITIAL.
    gv_call_auto = 'X'.
    PERFORM get_call_grdata.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CALL_GRDATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_call_grdata .

  DATA : ls_grhead LIKE LINE OF gt_grdata,
         lt_gritem LIKE gt_gritem,
         ls_gritem LIKE LINE OF lt_gritem.
  DATA : lv_pomnr TYPE ztsspoi-pomnr.
  DATA : lv_venid TYPE ztsspoh-venid.
  DATA : lv_stonm TYPE ztssstrg-stonm.

  DATA ls_scol TYPE lvc_s_scol.
  DATA : BEGIN OF ls_vnprc,
           vnprc TYPE ztssprcat-vnprc,
           curky TYPE ztssprcat-curky,
         END OF ls_vnprc,
         lt_vnprc LIKE TABLE OF ls_vnprc.

  SELECT SINGLE grnum rstat grdat jenum fyear stext rgdat rgtor
   INTO CORRESPONDING FIELDS OF ls_grhead
   FROM ztssgrh
   WHERE grnum = gv_call_num.

  SELECT grnum grseq ponum itnum stoid amount meins del
    INTO CORRESPONDING FIELDS OF TABLE lt_gritem
    FROM ztssgri
    WHERE grnum = gv_call_num.

  CLEAR gs_gritem.
  LOOP AT lt_gritem INTO ls_gritem.

    SELECT SINGLE pomnr
      INTO lv_pomnr
      FROM ztsspoi
      WHERE ponum = ls_gritem-ponum
      AND itnum = ls_gritem-itnum.

    ls_gritem-pomnr = lv_pomnr.

    SELECT SINGLE venid
      INTO lv_venid
      FROM ztsspoh
      WHERE ponum = ls_gritem-ponum.

    ls_grhead-venid = lv_venid.
    ls_grhead-venid = lv_venid.

    PERFORM get_vendor_name USING lv_venid CHANGING ls_grhead-vname.
    PERFORM get_mat_name USING lv_pomnr CHANGING ls_gritem-matnm.
    PERFORM get_emp_name USING ls_grhead-rgtor CHANGING ls_grhead-ename.


    SELECT SINGLE vnprc curky
      INTO ls_vnprc
      FROM ztssprcat
      WHERE venid = lv_venid
      AND rawnr = lv_pomnr.

    ls_gritem-toprc = ls_vnprc-vnprc * ls_gritem-amount.
    ls_gritem-curky = ls_vnprc-curky.

    CLEAR ls_scol.
    ls_scol-fname = 'TOPRC'.
    ls_scol-color-col = 3.
    ls_scol-color-int = 1.
    ls_scol-color-inv = 0.
    APPEND ls_scol TO ls_gritem-it_col.

    SELECT SINGLE stonm
      INTO lv_stonm
      FROM ztssstrg
      WHERE stoid = ls_gritem-stoid.
    ls_gritem-stonm = lv_stonm.

    MODIFY lt_gritem FROM ls_gritem.
    CLEAR ls_gritem.
  ENDLOOP.

  MOVE-CORRESPONDING ls_grhead TO zsssmm0211.
  MOVE-CORRESPONDING lt_gritem TO gt_gritem.

  CALL SCREEN '0310'.
  LEAVE TO SCREEN 0.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  UPDATE_SELECTED_COLOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GO_ALV_PO_WAITING  text
*      -->P_LT_ROW_NO  text
*----------------------------------------------------------------------*
FORM update_selected_color  USING    co_alv TYPE REF TO cl_gui_alv_grid
                                     lt_row_no TYPE lvc_t_roid.

  DATA : ls_row_no TYPE lvc_s_roid.

  FIELD-SYMBOLS : <fs_data> LIKE LINE OF gt_podata.


  LOOP AT lt_row_no INTO ls_row_no.
    READ TABLE gt_podata ASSIGNING <fs_data> INDEX ls_row_no-row_id.
    IF sy-subrc = 0.
      <fs_data>-color = 'C710'.
    ENDIF.

  ENDLOOP.

  co_alv->refresh_table_display( ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETE_COLOR_BYDATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM  delete_color_bydata .
  FIELD-SYMBOLS : <fs_data> LIKE LINE OF gt_podata.
  LOOP AT gt_podata ASSIGNING <fs_data>.

    CLEAR <fs_data>-color.
  ENDLOOP.
  PERFORM refresh_table_display CHANGING go_alv_po_waiting.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETE_EACH_COLOR_BYDATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM delete_each_color_bydata .

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETE_COLOR_IF_NO_ITEMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_PONUM  text
*----------------------------------------------------------------------*
FORM delete_color_if_no_items  USING pv_ponum TYPE ztsspoh-ponum.
  FIELD-SYMBOLS: <fs_podata> LIKE LINE OF gt_podata.

  " 해당 PO의 아이템이 남아있는지 확인
  READ TABLE gt_item WITH KEY ponum = pv_ponum TRANSPORTING NO FIELDS.

  IF sy-subrc <> 0.  " 아이템 없음
    READ TABLE gt_podata ASSIGNING <fs_podata> WITH KEY ponum = pv_ponum.
    IF sy-subrc = 0.
      CLEAR <fs_podata>-color.
      PERFORM refresh_table_display CHANGING go_alv_po_waiting.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_SELECTED_ROWS_ONE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GO_ALV_GR_LIST  text
*      <--P_LT_ROW_NO  text
*      <--P_GV_SUBRC  text
*----------------------------------------------------------------------*
FORM get_selected_rows_one  USING    co_alv    TYPE REF TO cl_gui_alv_grid
                            CHANGING ct_row_no TYPE lvc_t_roid
                                 cv_subrc   TYPE sy-subrc.

  DATA: lv_cnt TYPE i.

  CALL METHOD co_alv->get_selected_rows
    IMPORTING
      et_row_no = ct_row_no.

  DESCRIBE TABLE ct_row_no LINES lv_cnt.

  IF lv_cnt = 0.
    cv_subrc = 4.
*    MESSAGE s110(zmcss). "  '1개의 행을 선택해주세요!'.
    MESSAGE i110(zmcss). "  '1개의 행을 선택해주세요!'.
    RETURN.
  ELSEIF lv_cnt > 1.
    cv_subrc = 4.
    MESSAGE i999(zmcss) WITH '1개 행만 선택해주세요!'.
    RETURN.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GR_ITEM_DETAIL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_INDEX  text
*----------------------------------------------------------------------*
FORM get_gr_item_detail  USING pv_index TYPE lvc_index.


  DATA : lv_pomnr TYPE ztsspoi-pomnr.
  DATA : lv_venid TYPE ztsspoh-venid.
  DATA : lv_stonm TYPE ztssstrg-stonm.

  DATA ls_scol TYPE lvc_s_scol.

  DATA : BEGIN OF ls_vnprc,
           vnprc TYPE ztssprcat-vnprc,
           curky TYPE ztssprcat-curky,
         END OF ls_vnprc,
         lt_vnprc LIKE TABLE OF ls_vnprc.


  SELECT grnum grseq ponum itnum stoid amount meins del
    INTO CORRESPONDING FIELDS OF TABLE gt_gritem2
    FROM ztssgri
    WHERE grnum = gs_grdata-grnum.

  CLEAR gs_gritem2.
  LOOP AT gt_gritem2 INTO gs_gritem2.

    SELECT SINGLE pomnr
      INTO lv_pomnr
      FROM ztsspoi
      WHERE ponum = gs_gritem2-ponum
      AND itnum = gs_gritem2-itnum.

    gs_gritem2-pomnr = lv_pomnr.

    SELECT SINGLE venid
      INTO lv_venid
      FROM ztsspoh
      WHERE ponum = gs_gritem2-ponum.

    gs_gritem2-venid = lv_venid.

    PERFORM get_vendor_name USING lv_venid CHANGING gs_gritem2-vname.
    PERFORM get_mat_name USING lv_pomnr CHANGING gs_gritem2-matnm.


    SELECT SINGLE vnprc curky
      INTO ls_vnprc
      FROM ztssprcat
      WHERE venid = lv_venid
      AND rawnr = lv_pomnr.

    gs_gritem2-toprc = ls_vnprc-vnprc * gs_gritem2-amount.
    gs_gritem2-curky = ls_vnprc-curky.

    CLEAR ls_scol.
    ls_scol-fname = 'TOPRC'.
    ls_scol-color-col = 3.
    ls_scol-color-int = 1.
    ls_scol-color-inv = 0.
    APPEND ls_scol TO gs_gritem2-it_col.

    SELECT SINGLE stonm
      INTO lv_stonm
      FROM ztssstrg
      WHERE stoid = gs_gritem2-stoid.
    gs_gritem2-stonm = lv_stonm.

    MODIFY gt_gritem2 FROM gs_gritem2.
    CLEAR gs_gritem2.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CALCULATE_DELAY_RATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_PO_SUM  text
*----------------------------------------------------------------------*
FORM calculate_delay_rate USING pt_po_sum LIKE gt_itamt.

  DATA: lv_total_cnt  TYPE i,
        lv_delay_cnt  TYPE i,
        lv_delay_rate TYPE p DECIMALS 2.

  lv_total_cnt = lines( pt_po_sum ).      " 전체 PO 건수
  lv_delay_cnt = lines( gt_vdudat ).      " 지연 PO 건수

  IF lv_total_cnt > 0.
    lv_delay_rate = ( lv_delay_cnt / lv_total_cnt ) * 100.
    gv_delay_rate = lv_delay_rate.

    " gt_vdudat의 모든 라인에 지연율 추가
    LOOP AT gt_vdudat ASSIGNING FIELD-SYMBOL(<fs_data>).
      <fs_data>-duded = lv_delay_rate.
    ENDLOOP.
  ENDIF.

ENDFORM.

----------------------------------------------------------------------------------
Extracted by Mass Download version 1.5.5 - E.G.Mellodew. 1998-2025. Sap Release 750

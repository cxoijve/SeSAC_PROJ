*&---------------------------------------------------------------------*
*&  Include           ZRSSMM01F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .

*  IF pa_rb1 EQ 'X'.

  SELECT h~ponum h~podat h~venid h~dudat h~stext  h~rgdat h~rgtor
    i~itnum i~pomnr i~amount i~meins i~plant i~poprc i~curky i~del
    INTO CORRESPONDING FIELDS OF TABLE gt_total
    FROM ztsspoh AS h
    INNER JOIN ztsspoi AS i
    ON h~ponum = i~ponum
    WHERE h~podat IN so_poda
    AND h~dudat IN so_duda
    AND i~pomnr IN so_mat.

  " dfgdsgd pa_vnme
  MOVE-CORRESPONDING gt_total TO gt_data.
  delete ADJACENT DUPLICATES FROM gt_data COMPARING ponum.

*  ELSE.

*    SELECT h~ponum h~podat h~venid h~dudat h~stext  h~rgdat h~rgtor
*    i~itnum i~pomnr i~amount i~meins i~plant i~poprc i~curky i~del
*    INTO CORRESPONDING FIELDS OF TABLE gt_total
*    FROM ztsspoh AS h
*    INNER JOIN ztsspoi AS i
*    ON h~ponum = i~ponum
*    WHERE h~podat IN so_poda
*    AND h~dudat IN so_duda
*    AND i~pomnr IN so_mat.

  "SDFsf pa_vid
*    MOVE-CORRESPONDING gt_total to gt_item.

  IF pa_chk1 EQ 'X'.

  ENDIF.

*  ENDIF.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_screen .
  LOOP AT SCREEN.

    CASE 'X'.
      WHEN pa_rb1.

        CASE screen-group1.
          WHEN 'MD1'.
            screen-active = '0'. "비활성화 처리
            MODIFY SCREEN.
        ENDCASE.

      WHEN pa_rb2.

        CASE screen-group1.
          WHEN 'MD2'.
            screen-active = '0'. "비활성화 처리
            MODIFY SCREEN.
        ENDCASE.

    ENDCASE.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_alv_0100 .
  IF go_dock IS INITIAL.
    "ALV Object
    PERFORM init_alv.
    PERFORM req_event_for_alv.
    PERFORM display_alv02.
    PERFORM display_alv03.
  ELSE.
    "ALV Refresh
    go_alv2->refresh_table_display(   ).
    go_alv3->refresh_table_display(   ).
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  INIT_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_alv .
  PERFORM set_docking.

  PERFORM set_document.

  PERFORM set_split.

  PERFORM set_alv.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_DOCKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_docking .
  CREATE OBJECT go_dock
    EXPORTING
*     parent                      =
      repid                       = sy-repid
      dynnr                       = sy-dynnr
      side                        = cl_gui_docking_container=>dock_at_top
      extension                   = 1000
*     style                       =
*     lifetime                    = lifetime_default
*     caption                     =
*     metric                      = 0
*     ratio                       =
*     no_autodef_progid_dynnr     =
*     name                        =
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.
  IF sy-subrc <> 0.
    MESSAGE a007(zmc00) WITH 'ALV Error'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_DOCUMENT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_document.

  DATA: lv_total_count TYPE i,
        lv_complete    TYPE i,
        lv_in_progress TYPE i,
        lv_not_started TYPE i,
        lv_text        TYPE sdydo_text_element.

  CREATE OBJECT go_document
    EXPORTING
      style = 'ALV_GRID'.

  " 제목
  CALL METHOD go_document->add_text
    EXPORTING
      text         = '구매오더 상세 조회'(t01)
      sap_fontsize = cl_dd_area=>large
      sap_emphasis = cl_dd_area=>strong.

  CALL METHOD go_document->new_line.
  CALL METHOD go_document->new_line.

  " # 통계 정보 계산
  DESCRIBE TABLE gt_data LINES lv_total_count.

  LOOP AT gt_data INTO DATA(ls_data).
    CASE ls_data-pstat.
      WHEN 1. lv_complete = lv_complete + 1.      " 입고완료
      WHEN 2. lv_in_progress = lv_in_progress + 1. " 입고중
      WHEN 3. lv_not_started = lv_not_started + 1. " 미입고
    ENDCASE.
  ENDLOOP.

  " 총 개수
  lv_text = |총 구매오더: { lv_total_count }건|.
  CALL METHOD go_document->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_area=>medium
      sap_emphasis = cl_dd_area=>strong.

  CALL METHOD go_document->add_gap
    EXPORTING
      width = 20.

  CALL METHOD go_document->new_line.
  CALL METHOD go_document->new_line.

  " 입고완료 (초록색)
  CALL METHOD go_document->add_icon
    EXPORTING
      sap_icon = 'ICON_LED_GREEN'. " 초록 신호등

  CALL METHOD go_document->add_gap
    EXPORTING
      width = 5.

  lv_text = |입고완료: { lv_complete }건|.
  CALL METHOD go_document->add_text
    EXPORTING
      text      = lv_text
      sap_color = cl_dd_area=>list_positive.  " 초록색

  CALL METHOD go_document->add_gap
    EXPORTING
      width = 20.

  " 입고중 (노란색)
  CALL METHOD go_document->add_icon
    EXPORTING
      sap_icon = 'ICON_LED_YELLOW'.  " 노란 신호등

  CALL METHOD go_document->add_gap
    EXPORTING
      width = 5.

  lv_text = |부분입고중: { lv_in_progress }건|.
  CALL METHOD go_document->add_text
    EXPORTING
      text      = lv_text
      sap_color = cl_dd_area=>list_total.  " 노란색

  CALL METHOD go_document->add_gap
    EXPORTING
      width = 20.

  " 미입고 (빨간색)
  CALL METHOD go_document->add_icon
    EXPORTING
      sap_icon = 'ICON_LED_RED'.  " 빨간 신호등

  CALL METHOD go_document->add_gap
    EXPORTING
      width = 5.

  lv_text = |미입고: { lv_not_started }건|.
  CALL METHOD go_document->add_text
    EXPORTING
      text      = lv_text
      sap_color = cl_dd_area=>list_negative.  " 빨간색

*   입고완료 (초록색)
*  lv_text = |입고완료: { lv_complete }건|.
*  CALL METHOD go_document->add_text
*    EXPORTING
*      text      = lv_text
*      sap_color = cl_dd_area=>list_positive.  " 초록색
*
*  CALL METHOD go_document->add_gap
*    EXPORTING
*      width = 20.
*
*   입고중 (노란색)
*  lv_text = |입고중: { lv_in_progress }건|.
*  CALL METHOD go_document->add_text
*    EXPORTING
*      text      = lv_text
*      sap_color = cl_dd_area=>list_total.  " 노란색
*
*  CALL METHOD go_document->add_gap
*    EXPORTING
*      width = 20.
*
*   미입고 (빨간색)
*  lv_text = |미입고: { lv_not_started }건|.
*  CALL METHOD go_document->add_text
*    EXPORTING
*      text      = lv_text
*      sap_color = cl_dd_area=>list_negative.  " 빨간색

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_SPLIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_split .
  CREATE OBJECT go_split
    EXPORTING
      parent  = go_dock
      rows    = 2
*     WIDTH   = 2000
      columns = 1.

  CALL METHOD go_split->set_row_height
    EXPORTING
      id     = 1
      height = 20.


  CALL METHOD go_split->get_container
    EXPORTING
      row       = 1
      column    = 1
    RECEIVING
      container = go_con1.

  CALL METHOD go_document->display_document
    EXPORTING
      parent = go_con1.


  CALL METHOD go_split->get_container
    EXPORTING
      row       = 2
      column    = 1
    RECEIVING
      container = go_con2.

  CREATE OBJECT go_split2
    EXPORTING
      parent  = go_con2
      rows    = 1
*     WIDTH   = 2000
      columns = 2.

  CALL METHOD go_split2->set_row_height
    EXPORTING
      id     = 1
      height = 1000.

  CALL METHOD go_split2->get_container
    EXPORTING
      row       = 1
      column    = 1
    RECEIVING
      container = go_con3.

  CALL METHOD go_split2->get_container
    EXPORTING
      row       = 1
      column    = 2
    RECEIVING
      container = go_con4.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_alv .
  CREATE OBJECT go_alv2
    EXPORTING
*     i_shellstyle      = 0
*     i_lifetime        =
      i_parent          = go_con3
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.
  IF sy-subrc <> 0.
    MESSAGE a007(zmc00) WITH 'ALV Error'.
  ENDIF.

  CREATE OBJECT go_alv3
    EXPORTING
*     i_shellstyle      = 0
*     i_lifetime        =
      i_parent          = go_con4
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.
  IF sy-subrc <> 0.
    MESSAGE a007(zmc00) WITH 'ALV Error'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV02
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv02 .

  PERFORM set_layout CHANGING gs_layo.
  PERFORM set_fcat TABLES gt_fcat.
  PERFORM set_sort TABLES gt_sort.

  CALL METHOD go_alv2->set_table_for_first_display
    EXPORTING
*     i_buffer_active               =
*     i_bypassing_buffer            =
*     i_consistency_check           =
      i_structure_name              = 'ZSSSMM0102'
*     is_variant                    =
*     i_save                        =
*     i_default                     = 'X'
      is_layout                     = gs_layo
*     is_print                      =
*     it_special_groups             =
*     it_toolbar_excluding          =
*     it_hyperlink                  =
*     it_alv_graphics               =
*     it_except_qinfo               =
*     ir_salv_adapter               =
    CHANGING
      it_outtab                     = gt_data
      it_fieldcatalog               = gt_fcat
      it_sort                       = gt_sort
*     it_filter                     =
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0.
    MESSAGE a007(zmc00) WITH 'ALV Error'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV03
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv03 .
  PERFORM set_layout CHANGING gs_layo2.
  PERFORM set_fcat2 TABLES gt_fcat2.
  CALL METHOD go_alv3->set_table_for_first_display
    EXPORTING
*     i_buffer_active               =
*     i_bypassing_buffer            =
*     i_consistency_check           =
      i_structure_name              = 'ZSSSMM0104'
*     is_variant                    =
*     i_save                        =
*     i_default                     = 'X'
      is_layout                     = gs_layo2
*     is_print                      =
*     it_special_groups             =
*     it_toolbar_excluding          =
*     it_hyperlink                  =
*     it_alv_graphics               =
*     it_except_qinfo               =
*     ir_salv_adapter               =
    CHANGING
      it_outtab                     = gt_item
      it_fieldcatalog               = gt_fcat2
*     it_sort                       =
*     it_filter                     =
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0.
    MESSAGE a007(zmc00) WITH 'ALV Error'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFY_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM modify_data TABLES pt_data STRUCTURE gs_data.


  LOOP AT pt_data.
    PERFORM set_curr_status USING pt_data-ponum CHANGING  pt_data pt_data-pstat pt_data-pstat_t.
    PERFORM get_ven_name USING pt_data-venid CHANGING pt_data-vname.
    PERFORM get_emp_name USING pt_data-rgtor CHANGING pt_data-ename.


    MODIFY pt_data.
    CLEAR pt_data.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_CURR_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATA_PONUM  text
*      <--P_LS_DATA  text
*      <--P_LS_DATA_PSTAT  text
*      <--P_LS_DATA_PSTAT_T  text
*----------------------------------------------------------------------*
FORM set_curr_status  USING    p_num TYPE ztsspoi-ponum
                      CHANGING  cs_data LIKE gs_data
                                c_flag TYPE c
                                c_stat TYPE zessetext.

  DATA : lt_po_sum LIKE TABLE OF gs_itamt,
         lt_gr_sum LIKE TABLE OF gs_itamt.

  PERFORM get_po_sum USING p_num CHANGING lt_po_sum.
  PERFORM get_gr_sum USING p_num CHANGING lt_gr_sum.

  PERFORM cal_grsum USING lt_po_sum lt_gr_sum CHANGING cs_data c_flag c_stat.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PO_SUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_NUM  text
*      <--P_LT_PO_SUM  text
*----------------------------------------------------------------------*
FORM get_po_sum  USING    p_num TYPE ztsspoh-ponum
                 CHANGING ct_po_sum LIKE gt_itamt.


  DATA: lt_po_raw TYPE STANDARD TABLE OF ztsspoi,
        ls_po_raw LIKE LINE OF lt_po_raw,
        ls_po_sum LIKE gs_itamt.

  SELECT ponum itnum amount
    INTO CORRESPONDING FIELDS OF TABLE lt_po_raw
    FROM ztsspoi
    WHERE ponum = p_num.

  IF sy-subrc <> 0. RETURN. ENDIF.

  LOOP AT lt_po_raw INTO ls_po_raw.
    ls_po_sum-ponum  = ls_po_raw-ponum.
    ls_po_sum-itnum  = ls_po_raw-itnum.
    ls_po_sum-amount = ls_po_raw-amount.
    COLLECT ls_po_sum INTO ct_po_sum.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GR_SUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_NUM  text
*      <--P_LT_GR_SUM  text
*----------------------------------------------------------------------*
FORM get_gr_sum USING p_num TYPE ztsspoi-ponum
                CHANGING ct_gr_sum LIKE gt_itamt.

  DATA: lt_gr_raw TYPE TABLE OF ztssgri,
        ls_gr_raw LIKE LINE OF lt_gr_raw,
        ls_gr_sum LIKE gs_itamt.

  SELECT ponum itnum amount
    INTO CORRESPONDING FIELDS OF TABLE lt_gr_raw
    FROM ztssgri
    WHERE ponum = p_num.

*  IF sy-subrc <> 0. MESSAGE s999(zmcss) WITH '입고내역이 존재하지 않습니다!'. RETURN. ENDIF.

  LOOP AT lt_gr_raw INTO ls_gr_raw.
    ls_gr_sum-ponum  = ls_gr_raw-ponum.
    ls_gr_sum-itnum  = ls_gr_raw-itnum.
    ls_gr_sum-amount = ls_gr_raw-amount.
    COLLECT ls_gr_sum INTO ct_gr_sum.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CAL_GRSUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_PO_SUM  text
*      -->P_LT_GR_SUM  text
*      <--P_CS_DATA  text
*      <--P_C_FLAG  text
*      <--P_C_STAT  text
*----------------------------------------------------------------------*
FORM cal_grsum  USING pt_po_sum LIKE gt_itamt
                      pt_gr_sum LIKE gt_itamt
                CHANGING  cs_data LIKE gs_data
                          c_flag TYPE c
                          c_stat TYPE zessetext.

  DATA : ls_gr_sum LIKE LINE OF pt_gr_sum,
         ls_po_sum LIKE gs_itamt,
         lv_comp   TYPE abap_bool,
         lv_incomp TYPE abap_bool.

  LOOP AT pt_po_sum INTO ls_po_sum.

    READ TABLE pt_gr_sum INTO ls_gr_sum WITH KEY ponum = ls_po_sum-ponum
                                                 itnum = ls_po_sum-itnum.

    IF sy-subrc <> 0.
      " 미입고
      lv_incomp = abap_true.
    ELSEIF ls_gr_sum-amount < ls_po_sum-amount.
      " 입고중
      lv_comp = abap_true.
    ELSE.
      " 입고완료
      lv_comp = abap_true.
    ENDIF.
  ENDLOOP.

  " 최종 상태 결정
  IF lv_comp = abap_true AND lv_incomp = abap_true.
*    cs_data-light = '2'.
    cs_data-light = '@5D@'.
    c_flag = 2.
    c_stat = '입고중'.  " 섞여있음
  ELSEIF lv_comp = abap_true.
    cs_data-light = '@5B@'.
*    cs_data-light = '3'.
    c_flag = 1.
    c_stat = '입고완료'.  " 모두 완료
  ELSE.
    cs_data-light = '@5C@'.
*    cs_data-light = '1'.
    c_flag = 3.
    c_stat = '미입고'.  " 모두 미입고 또는 입고중
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GS_LAYO  text
*----------------------------------------------------------------------*
FORM set_layout  CHANGING cs_layo TYPE lvc_s_layo.

  cs_layo-cwidth_opt = 'A'.
  cs_layo-zebra = 'X'.
  cs_layo-ctab_fname = 'IT_COL'.
  cs_layo-info_fname = 'COLOR'.
  cs_layo-sel_mode = 'A'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_FCAT  text
*----------------------------------------------------------------------*
FORM set_fcat  TABLES ct_fcat TYPE lvc_t_fcat.

  DATA: lv_pos TYPE i VALUE 1.

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'light'.
  ct_fcat-coltext = '입고상태'.
  ct_fcat-col_pos = lv_pos.
  ct_fcat-just = 'C'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'PODAT'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'DUDAT'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'VENID'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'VNAME'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'ENAME'.
  ct_fcat-coltext = '담당자 이름'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'STEXT'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'PONUM'.
  ct_fcat-col_pos = lv_pos = lv_pos + 1.
  ct_fcat-hotspot = 'X'.
  APPEND ct_fcat TO ct_fcat[].


  CLEAR ct_fcat.
  ct_fcat-fieldname = 'CURKY'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'RGDAT'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'RGTOR'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'PSTAT_T'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'PSTAT'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'IT_COL'.      " 색상 정보를 담은 internal table 필드명
  ct_fcat-ref_table = 'LVC_T_SCOL'.  " 색상 테이블 구조 참조
  ct_fcat-tech = 'X'.                " 화면에 표시 안 함
  APPEND ct_fcat TO ct_fcat[].




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_SORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_SORT  text
*----------------------------------------------------------------------*
FORM set_sort  TABLES   pt_sort STRUCTURE lvc_s_sort.

  SORT gt_data BY podat DESCENDING.


  DATA: ls_sort TYPE lvc_s_sort.

  CLEAR ls_sort.
  ls_sort-fieldname = 'PODAT'.      "정렬할 필드명
  ls_sort-spos      = 1.             "정렬 순서 (1,2,3...)
  ls_sort-down      = 'X'.           "오름차순 (X) / 내림차순 (공백)
  ls_sort-subtot    = 'X'.           "소계 표시 (옵션)
  APPEND ls_sort TO pt_sort.

  CLEAR ls_sort.
  ls_sort-fieldname = 'VENID'.      "정렬할 필드명
  ls_sort-spos      = 2.             "정렬 순서 (1,2,3...)
  ls_sort-up        = 'X'.           "오름차순 (X) / 내림차순 (공백)
  ls_sort-subtot    = 'X'.           "소계 표시 (옵션)
  APPEND ls_sort TO pt_sort.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REQ_EVENT_FOR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM req_event_for_alv .
  SET HANDLER :  lcl_event_handler=>handle_hotspot FOR go_alv2.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FCAT2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_FCAT2  text
*----------------------------------------------------------------------*
FORM set_fcat2  TABLES ct_fcat TYPE lvc_t_fcat.

  DATA: lv_pos TYPE i VALUE 1.

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'TOPRC'.
  ct_fcat-coltext = '거래 가격'.
*  ct_fcat-col_pos = lv_pos.
  ct_fcat-do_sum = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'DEL'.
  ct_fcat-coltext = '삭제 여부'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'PLANT'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

  CLEAR ct_fcat.
  ct_fcat-fieldname = 'POPRC'.
  ct_fcat-no_out = 'X'.
  APPEND ct_fcat TO ct_fcat[].

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
  CASE ok_code.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  SET_DEFAULT_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_default_0100 .
  DATA : lt_info TYPE TABLE OF zsfg2801 WITH HEADER LINE.

  DATA: BEGIN OF gs_mat,
          matnr TYPE ztssmat-matnr,
        END OF gs_mat,
        gt_mat LIKE TABLE OF gs_mat.

  SELECT matnr
    INTO TABLE gt_mat
    FROM ztssmat
    WHERE mtype = 'R'.


  LOOP AT gt_mat INTO gs_mat.

    lt_info-matnr = gs_mat.
    lt_info-stoid = 'SL01'.
    APPEND lt_info TO gt_matlist.

  ENDLOOP.


*  lt_info-matnr = 'R0000001'.
*  lt_info-stoid = 'SL01'.
*  APPEND lt_info.
*
*  lt_info-matnr = 'F0000001'.
*  lt_info-stoid = 'SL02'.
*  APPEND lt_info.

*  CALL FUNCTION 'Z_FMSS_GET_AVAIL_WARES'
*    EXPORTING
*      it_matlist   = lt_info[]
*    EXCEPTIONS
*      query_failed = 1
*      OTHERS       = 2.
*  IF sy-subrc <> 0.
*    MESSAGE i999(zmcss) WITH 'NO AVAIL WARES!'.
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  INIT_ALV_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM
init_alv_0200 .
  PERFORM create_alv_custom USING 'CON_MAT'  CHANGING go_con5   go_alv5.
  PERFORM set_layout3.
  PERFORM set_fcat3.
  PERFORM set_sort3.
  PERFORM set_exclude_btn.
  PERFORM set_tab_fdp_with_exclude USING 'ZSSSMD0803' gs_layo3 gt_exclude CHANGING gt_display gt_fcat3 gt_sort3 go_alv5.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREATE_ALV_CUSTOM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1492   text
*      <--P_GO_CON5  text
*      <--P_GO_ALV5  text
*----------------------------------------------------------------------*
FORM create_alv_custom USING VALUE(p_con) TYPE c
                 CHANGING  co_con TYPE REF TO cl_gui_custom_container
                           co_alv TYPE REF TO cl_gui_alv_grid.

  IF co_con IS NOT INITIAL. RETURN. ENDIF.

  CREATE OBJECT co_con
    EXPORTING
*     parent                      =
      container_name              = p_con
*     style                       =
*     lifetime                    = lifetime_default
*     repid                       =
*     dynnr                       =
*     no_autodef_progid_dynnr     =
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.
  IF sy-subrc <> 0.
    MESSAGE a100(zmss) WITH sy-uname. " 시스템 오류입니다 &에게 문의하세요!
  ENDIF.

  CREATE OBJECT co_alv
    EXPORTING
*     i_shellstyle      = 0
*     i_lifetime        =
      i_parent          = co_con
*     i_appl_events     = space
*     i_parentdbg       =
*     i_applogparent    =
*     i_graphicsparent  =
*     i_name            =
*     i_fcat_complete   = SPACE
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.

  IF sy-subrc <> 0.
    MESSAGE a100(zmss) WITH sy-uname. " 시스템 오류입니다 &에게 문의하세요!
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_TAB_FDP_WITH_EXCLUDE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1499   text
*      -->P_GS_LAYO3  text
*      -->P_GT_EXCLUDE  text
*      <--P_GT_CNT  text
*      <--P_GT_FCAT3  text
*      <--P_GT_SORT  text
*      <--P_GO_ALV5  text
*----------------------------------------------------------------------*
FORM set_tab_fdp_with_exclude  USING    VALUE(p_structure) TYPE dd02l-tabname
                                        VALUE(ps_layout) TYPE lvc_s_layo
                                        VALUE(pt_exclude) TYPE ui_functions
                               CHANGING ct_outtab TYPE STANDARD TABLE
                                        ct_fcat TYPE lvc_t_fcat
                                        ct_sort TYPE lvc_t_sort
                                        co_alv TYPE REF TO cl_gui_alv_grid.

  co_alv->set_table_for_first_display(
     EXPORTING
       i_structure_name = p_structure
       is_layout = ps_layout
       it_toolbar_excluding = pt_exclude
     CHANGING
       it_outtab = ct_outtab
       it_fieldcatalog = ct_fcat
       it_sort = ct_sort
     EXCEPTIONS
       invalid_parameter_combination = 1
       program_error = 23
       too_many_lines = 3
       OTHERS = 4
   ).
  IF sy-subrc <> 0.
    MESSAGE a100(zmcss) WITH sy-uname. " 시스템 오류입니다. 담당자 &에게 문의해주세요!
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_DEFAULT_0100_T
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_default_0100_t .


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_INFO_MAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_CNT  text
*      -->P_GT_MATLIST  text
*      <--P_GV_SUBRC  text
*----------------------------------------------------------------------*
FORM get_info_mat  TABLES   pt_cnt STRUCTURE gs_cnt
                            pt_matlist STRUCTURE gs_matlist
                   CHANGING pv_subrc TYPE sy-subrc.
  CLEAR : pv_subrc, pt_cnt[].
  DATA : lt_color TYPE lvc_t_scol WITH HEADER LINE.
  LOOP AT pt_matlist.

    SELECT SINGLE a~matnr b~matnm a~meins
      FROM ztssware AS a
      INNER JOIN ztssmat_t AS b
      ON a~matnr = b~matnr
*      AND b~langu = '3'
      INTO CORRESPONDING FIELDS OF pt_cnt
      WHERE a~stoid = pt_matlist-stoid
      AND a~matnr = pt_matlist-matnr.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    CALL FUNCTION 'Z_FMSS_GET_AVAIL_STOCKS'
      EXPORTING
        iv_begda         = '11110101'
        iv_endda         = sy-datum
        iv_stoid         = pt_matlist-stoid
        iv_matnr         = pt_matlist-matnr
      IMPORTING
        ev_astck         = pt_cnt-astck
        ev_istck         = pt_cnt-istck
        ev_ostck         = pt_cnt-ostck
        ev_dstck         = pt_cnt-dstck
        ev_fstck         = pt_cnt-fstck
      EXCEPTIONS
        material_unfound = 1
        minus_avail      = 2
        query_failed     = 3
        OTHERS           = 4.
    IF sy-subrc <> 0.
      pv_subrc = 4.
      RETURN.
    ENDIF.

    IF pt_cnt-astck IS NOT INITIAL.
      lt_color-fname = 'ASTCK'.
      lt_color-color-int = 1.
      lt_color-color-inv = 0.
      lt_color-color-col = 5.
      APPEND lt_color.
    ENDIF.

    IF pt_cnt-fstck IS NOT INITIAL.
      lt_color-fname = 'FSTCK'.
      lt_color-color-int = 0.
      lt_color-color-inv = 0.
      lt_color-color-col = 6.
      APPEND lt_color.

    ENDIF.

    APPEND LINES OF lt_color TO pt_cnt-cellscol.
    APPEND pt_cnt.

    CLEAR : lt_color, lt_color[].
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_LAYOUT3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_layout3 .
  gs_layo3-cwidth_opt = 'X'.
  gs_layo3-zebra = 'X'.
  gs_layo3-ctab_fname = 'CELLSCOL'.
  gs_layo3-stylefname = 'CT'.
*  gs_layo3-stylefname = 'CELLTAB'.
  gs_layo3-sel_mode = 'A'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FCAT3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_fcat3 .

  DATA: ls_fcat    TYPE lvc_s_fcat,
        lv_max_pos TYPE i.
  CLEAR gt_fcat3.

  " 현재 최대 col_pos 찾기
  LOOP AT gt_fcat3 INTO ls_fcat.
    IF ls_fcat-col_pos > lv_max_pos.
      lv_max_pos = ls_fcat-col_pos.
    ENDIF.
  ENDLOOP.
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'VENID'.
  ls_fcat-coltext = '업체코드'.
  ls_fcat-scrtext_l = '업체코드'.
  ls_fcat-scrtext_m = '업체코드'.
  ls_fcat-scrtext_s = '업체코드'.
  ls_fcat-col_pos = 1.  " 첫 번째 컬럼
  ls_fcat-outputlen = 10.
  ls_fcat-key = 'X'.
  APPEND ls_fcat TO gt_fcat3.

  LOOP AT gt_fcat3 INTO ls_fcat.
    IF ls_fcat-fieldname <> 'VENID' AND
       ls_fcat-fieldname <> 'VNAME'.
      ls_fcat-col_pos = ls_fcat-col_pos + 2.  " 2칸씩 밀기
      MODIFY gt_fcat3 FROM ls_fcat.
    ENDIF.
  ENDLOOP.

  " vname 추가 (두 번째)
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'VNAME'.
  ls_fcat-coltext = '업체명'.
  ls_fcat-scrtext_l = '업체명'.
  ls_fcat-scrtext_m = '업체명'.
  ls_fcat-scrtext_s = '업체명'.
  ls_fcat-col_pos = 2.  " 두 번째 컬럼
  ls_fcat-outputlen = 40.
  APPEND ls_fcat TO gt_fcat3.
  " 가용재고
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'ASTCK'.
  ls_fcat-coltext = '가용재고'.

  ls_fcat-outputlen = 15.
  ls_fcat-just = 'R'.         " 오른쪽 정렬
  ls_fcat-do_sum = 'X'.       " 합계
  ls_fcat-datatype = 'QUAN'.  " 수량 타입
  APPEND ls_fcat TO gt_fcat3.

  " 불량재고
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'ISTCK'.
  ls_fcat-coltext = '불량재고'.

  ls_fcat-outputlen = 15.
  ls_fcat-just = 'R'.
  ls_fcat-do_sum = 'X'.
  ls_fcat-datatype = 'QUAN'.
  APPEND ls_fcat TO gt_fcat3.

  " 반입재고
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'OSTCK'.
  ls_fcat-coltext = '반입재고'.

  ls_fcat-outputlen = 15.
  ls_fcat-just = 'R'.
  ls_fcat-do_sum = 'X'.
  ls_fcat-datatype = 'QUAN'.
  APPEND ls_fcat TO gt_fcat3.

  " 반출재고
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'DSTCK'.
  ls_fcat-coltext = '반출재고'.

  ls_fcat-outputlen = 15.
  ls_fcat-just = 'R'.
  ls_fcat-do_sum = 'X'.
  ls_fcat-datatype = 'QUAN'.
  APPEND ls_fcat TO gt_fcat3.

  " 폐기재고
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'FSTCK'.
  ls_fcat-coltext = '폐기재고'.
  ls_fcat-outputlen = 15.
  ls_fcat-just = 'R'.
  ls_fcat-do_sum = 'X'.
  ls_fcat-datatype = 'QUAN'.
  APPEND ls_fcat TO gt_fcat3.

  " 기본단위
  CLEAR ls_fcat.
  ls_fcat-fieldname = 'MEINS'.
  ls_fcat-coltext = '기본단위'.
  ls_fcat-outputlen = 5.
  ls_fcat-just = 'C'.         " 가운데 정렬
  APPEND ls_fcat TO gt_fcat3.


  CLEAR ls_fcat.
  ls_fcat-fieldname = 'BTN_TXT'.
  ls_fcat-coltext = TEXT-f09.
  ls_fcat-just = 'R'.
  ls_fcat-style = '0'. "Normal
  ls_fcat-col_pos = '11'.
  APPEND ls_fcat TO gt_fcat3.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_INTO_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_into_display .

  DATA: ls_color TYPE lvc_s_scol,
        ls_style TYPE lvc_s_styl.
  LOOP AT gt_cnt INTO gs_cnt.
    CLEAR gs_display.
    MOVE-CORRESPONDING gs_cnt TO gs_display.
    PERFORM get_venid USING gs_cnt-matnr CHANGING gs_display-venid.
    PERFORM get_ven_name USING gs_display-venid CHANGING gs_display-vname.

    IF gs_display-astck <= 10.
      CLEAR ls_color.
      ls_color-fname = 'ASTCK'.
      ls_color-color-col = 6.
      ls_color-color-int = 0.          "
      ls_color-color-inv = 0.          "
      APPEND ls_color TO gs_display-cellscol.
    ENDIF.
    CLEAR ls_style.
    ls_style-fieldname = 'BTN_TXT'.
    ls_style-style = cl_gui_alv_grid=>mc_style_button.
    APPEND ls_style TO gs_display-ct.
    gs_display-btn_txt = '구매오더하러 가기'.
    APPEND gs_display TO gt_display.
  ENDLOOP.
*  PERFORM modify_display.
  delete ADJACENT DUPLICATES FROM gt_cnt COMPARING matnr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_VENID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_CNT_MATNR  text
*      <--P_GS_DISPLAY_VENID  text
*----------------------------------------------------------------------*
FORM get_venid  USING    pv_matid TYPE ztssmat-matnr
                CHANGING cs_venid TYPE ztssvend-venid.


  SELECT SINGLE venid
    INTO cs_venid
    FROM ztssprcat
    WHERE rawnr = pv_matid.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_SORT3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_sort3 .


  DATA: ls_sort TYPE lvc_s_sort.

  REFRESH gt_sort.

  CLEAR ls_sort.
  ls_sort-fieldname = 'VENID'.
  ls_sort-spos = 1.
  ls_sort-up = 'X'.
  APPEND ls_sort TO gt_sort3.

  CLEAR ls_sort.
  ls_sort-fieldname = 'MATNR'.
  ls_sort-spos = 2.
  ls_sort-up = 'X'.
  APPEND ls_sort TO gt_sort3.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REQ_EVNET_FOR_ALV_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM req_evnet_for_alv_0200 .
  IF go_event_handler IS INITIAL.
    CREATE OBJECT go_event_handler.
  ENDIF.


  SET HANDLER go_event_handler->on_button_click FOR go_alv5.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REFRESH_ALVS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refresh_alvs .
  CALL METHOD go_alv5->get_frontend_fieldcatalog
    IMPORTING
      et_fieldcatalog = gt_fcat3.

  CALL METHOD go_alv5->set_frontend_fieldcatalog
    EXPORTING
      it_fieldcatalog = gt_fcat3.

*  CALL METHOD go_alv5->get_frontend_layout
*    IMPORTING
*      es_layout = ls_layo.

*  ls_layo-cwidth_opt = 'X'.
*  CALL METHOD go_alv5->set_frontend_layout
*    EXPORTING
*      is_layout = ls_layo.
  DATA: ls_stbl TYPE lvc_s_stbl.
  ls_stbl-row = 'X'.  "( row scroll Fix )
  ls_stbl-col = 'X'. "( col scroll Fix )
  go_alv5->refresh_table_display( EXPORTING i_soft_refresh = 'X'
                                           is_stable      = ls_stbl  ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_STOCK_TOP3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_stock_top3 .
  DATA: lt_sorted  LIKE gt_display,
        ls_display LIKE gs_display.

  " 초기화
  CLEAR: gv_low1_venid, gv_low1_vname, gv_low1_matnr, gv_low1_matnm, gv_low1_astck,
         gv_low2_venid, gv_low2_vname, gv_low2_matnr, gv_low2_matnm, gv_low2_astck,
         gv_low3_venid, gv_low3_vname, gv_low3_matnr, gv_low3_matnm, gv_low3_astck.

  " 데이터 복사
  lt_sorted[] = gt_display[].

  " 가용재고 오름차순 정렬 (낮은 순)
  SORT lt_sorted BY astck ASCENDING.

  " 1위 (가장 적은 재고)
  READ TABLE lt_sorted INTO ls_display INDEX 1.
  IF sy-subrc = 0.
    gv_low1_venid = ls_display-venid.
    gv_low1_vname = ls_display-vname.
    gv_low1_matnr = ls_display-matnr.
    perform get_mat_name using ls_display-matnr CHANGING gv_low1_matnm.
    gv_low1_astck = ls_display-astck.
  ENDIF.

  " 2위
  READ TABLE lt_sorted INTO ls_display INDEX 2.
  IF sy-subrc = 0.
    gv_low2_venid = ls_display-venid.
    gv_low2_vname = ls_display-vname.
    gv_low2_matnr = ls_display-matnr.
    perform get_mat_name using ls_display-matnr CHANGING gv_low2_matnm.
    gv_low2_astck = ls_display-astck.
  ENDIF.

  " 3위
  READ TABLE lt_sorted INTO ls_display INDEX 3.
  IF sy-subrc = 0.
    gv_low3_venid = ls_display-venid.
    gv_low3_vname = ls_display-vname.
    gv_low3_matnr = ls_display-matnr.
    perform get_mat_name using ls_display-matnr CHANGING gv_low3_matnm.
    gv_low3_astck = ls_display-astck.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_EXCLUDE_BTN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_exclude_btn .
  CLEAR gt_exclude.

  DATA : ls_excl TYPE ui_func,
         lt_excl TYPE ui_functions.

  ls_excl = cl_gui_alv_grid=>mc_fc_excl_all.
  APPEND ls_excl TO gt_exclude.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREATE_ALV_CUSTOM_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0059   text
*      <--P_GO_CON_TREE  text
*      <--P_GO_ALV_TREE  text
*----------------------------------------------------------------------*
FORM create_alv_custom_tree  USING VALUE(p_con) TYPE c
                 CHANGING  co_con TYPE REF TO cl_gui_custom_container
                           co_tree TYPE REF TO cl_gui_simple_tree.

  IF co_con IS NOT INITIAL. RETURN. ENDIF.

  CREATE OBJECT co_con
    EXPORTING
*     parent                      =
      container_name              = p_con
*     style                       =
*     lifetime                    = lifetime_default
*     repid                       =
*     dynnr                       =
*     no_autodef_progid_dynnr     =
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.
  IF sy-subrc <> 0.
    MESSAGE a100(zmss) WITH sy-uname. " 시스템 오류입니다 &에게 문의하세요!
  ENDIF.


  IF co_tree IS NOT INITIAL. RETURN. ENDIF.
  CREATE OBJECT co_tree
    EXPORTING
*     lifetime            =
      parent              = co_con
*     shellstyle          =
      node_selection_mode = cl_gui_simple_tree=>node_sel_mode_single
*     hide_selection      =
*     name                =
    EXCEPTIONS
      OTHERS              = 6.

  IF sy-subrc <> 0.
    MESSAGE a100(zmss) WITH sy-uname. " 시스템 오류입니다 &에게 문의하세요!
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REQ_EVENT_FOR_ALV_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM req_event_for_alv_0300 .
  DATA: ls_event TYPE cntl_simple_event,
        lt_event LIKE TABLE OF ls_event.

  ls_event-eventid = cl_gui_simple_tree=>eventid_node_double_click.
*  ls_event-appl_event = 'X'. " PAI Event
  APPEND ls_event TO lt_event.
  CALL METHOD go_alv_tree->set_registered_events
    EXPORTING
      events = lt_event.

  SET HANDLER lcl_handler_tree=>on_node_double_click FOR go_alv_tree.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_TREE_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GO_ALV_TREE  text
*----------------------------------------------------------------------*
FORM display_tree_0400  CHANGING co_tree TYPE REF TO cl_gui_simple_tree.
  PERFORM get_tree_data.

  CALL METHOD co_tree->add_nodes
    EXPORTING
      table_structure_name = 'MTREESNODE'
      node_table           = gt_tree
*  EXCEPTIONS
*     error_in_node_table  = 1
*     failed               = 2
*     dp_error             = 3
*     table_structure_name_not_found = 4
*     others               = 5
    .
  CALL METHOD co_tree->expand_node
    EXPORTING
      node_key = 'ROOT'.

  CALL METHOD co_tree->expand_node
    EXPORTING
      node_key = '1000'.

  CALL METHOD co_tree->expand_node
    EXPORTING
      node_key = '2000'.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

* Expand Level
*  CALL METHOD go_tree->expand_root_nodes
*    EXPORTING
*      level_count    = 1
*      expand_subtree = ''.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_TREE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
* FORM: Tree 데이터 생성 (MESSAGE 제거)
*----------------------------------------------------------------------*
FORM get_tree_data.

  DATA: lv_year TYPE numc4,
        lv_quarter TYPE c LENGTH 2,
        lv_prev_year TYPE numc4,
        lv_prev_quarter TYPE c LENGTH 2,
        lv_node_key TYPE string,
        lv_vendor_key TYPE string,
        lv_text TYPE string,
        lv_month TYPE numc2,
        lv_po_count TYPE i,
        lv_count_str TYPE string,  " ★ 추가
        ls_temp LIKE gs_po.

  REFRESH: gt_tree, gt_po.

  SELECT h~ponum h~venid h~podat h~dudat v~vname
    INTO CORRESPONDING FIELDS OF TABLE gt_po
    FROM ztsspoh AS h
    LEFT JOIN ztssvend AS v ON h~venid = v~venid
    ORDER BY h~podat DESCENDING.

  CHECK sy-subrc = 0.

  LOOP AT gt_po INTO gs_po.
    gs_po-year = gs_po-podat(4).
    gs_po-month = gs_po-podat+4(2).
    MODIFY gt_po FROM gs_po.
  ENDLOOP.


  CLEAR gs_tree.
  gs_tree-node_key = 'ROOT'.
  gs_tree-isfolder = 'X'.
  gs_tree-text = '구매오더 목록'.
  gs_tree-expander = 'X'.
  APPEND gs_tree TO gt_tree.

  CLEAR: lv_prev_year, lv_prev_quarter.

  LOOP AT gt_po INTO gs_po.

    CHECK gs_po-podat IS NOT INITIAL.
    CHECK gs_po-venid IS NOT INITIAL.

    lv_year = gs_po-year.
    lv_month = gs_po-month.


    IF lv_month BETWEEN '01' AND '03'.
      lv_quarter = 'Q1'.
    ELSEIF lv_month BETWEEN '04' AND '06'.
      lv_quarter = 'Q2'.
    ELSEIF lv_month BETWEEN '07' AND '09'.
      lv_quarter = 'Q3'.
    ELSE.
      lv_quarter = 'Q4'.
    ENDIF.


    IF lv_year <> lv_prev_year.

      CLEAR lv_po_count.
      LOOP AT gt_po INTO ls_temp WHERE year = lv_year.
        lv_po_count = lv_po_count + 1.
      ENDLOOP.

      CLEAR gs_tree.
      gs_tree-node_key = lv_year.
      gs_tree-relatkey = 'ROOT'.
      gs_tree-relatship = cl_gui_simple_tree=>relat_last_child.
      gs_tree-isfolder = 'X'.


      lv_count_str = lv_po_count.
      CONDENSE lv_count_str NO-GAPS.
      CONCATENATE lv_year '년 (' lv_count_str '건)' INTO lv_text.
      gs_tree-text = lv_text.
      gs_tree-expander = 'X'.
      APPEND gs_tree TO gt_tree.

      lv_prev_year = lv_year.
      CLEAR lv_prev_quarter.
    ENDIF.


    IF lv_quarter <> lv_prev_quarter.

      CLEAR lv_po_count.
      LOOP AT gt_po INTO ls_temp WHERE year = lv_year.

        CASE lv_quarter.
          WHEN 'Q1'.
            IF ls_temp-month BETWEEN '01' AND '03'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
          WHEN 'Q2'.
            IF ls_temp-month BETWEEN '04' AND '06'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
          WHEN 'Q3'.
            IF ls_temp-month BETWEEN '07' AND '09'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
          WHEN 'Q4'.
            IF ls_temp-month BETWEEN '10' AND '12'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
        ENDCASE.
      ENDLOOP.

      CLEAR gs_tree.
      CONCATENATE lv_year '_' lv_quarter INTO lv_node_key.
      gs_tree-node_key = lv_node_key.
      gs_tree-relatkey = lv_year.
      gs_tree-relatship = cl_gui_simple_tree=>relat_last_child.
      gs_tree-isfolder = 'X'.


      lv_count_str = lv_po_count.
      CONDENSE lv_count_str NO-GAPS.

      CASE lv_quarter.
        WHEN 'Q1'.
          CONCATENATE '1분기 (1~3월) - ' lv_count_str '건' INTO lv_text.
        WHEN 'Q2'.
          CONCATENATE '2분기 (4~6월) - ' lv_count_str '건' INTO lv_text.
        WHEN 'Q3'.
          CONCATENATE '3분기 (7~9월) - ' lv_count_str '건' INTO lv_text.
        WHEN 'Q4'.
          CONCATENATE '4분기 (10~12월) - ' lv_count_str '건' INTO lv_text.
      ENDCASE.

      gs_tree-text = lv_text.
      gs_tree-expander = 'X'.
      APPEND gs_tree TO gt_tree.

      lv_prev_quarter = lv_quarter.
    ENDIF.


    CONCATENATE lv_year '_' lv_quarter '_' gs_po-venid INTO lv_vendor_key.

    READ TABLE gt_tree TRANSPORTING NO FIELDS
         WITH KEY node_key = lv_vendor_key.

    IF sy-subrc <> 0.


      CLEAR lv_po_count.
      LOOP AT gt_po INTO ls_temp WHERE venid = gs_po-venid
                                   AND year = lv_year.

        CASE lv_quarter.
          WHEN 'Q1'.
            IF ls_temp-month BETWEEN '01' AND '03'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
          WHEN 'Q2'.
            IF ls_temp-month BETWEEN '04' AND '06'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
          WHEN 'Q3'.
            IF ls_temp-month BETWEEN '07' AND '09'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
          WHEN 'Q4'.
            IF ls_temp-month BETWEEN '10' AND '12'.
              lv_po_count = lv_po_count + 1.
            ENDIF.
        ENDCASE.
      ENDLOOP.

      CLEAR gs_tree.
      gs_tree-node_key = lv_vendor_key.
      gs_tree-relatkey = lv_node_key.
      gs_tree-relatship = cl_gui_simple_tree=>relat_last_child.
      gs_tree-isfolder = ''.


      lv_count_str = lv_po_count.
      CONDENSE lv_count_str NO-GAPS.

      CONCATENATE gs_po-vname ' (' gs_po-venid ') - ' lv_count_str '건'
           INTO lv_text SEPARATED BY space.
      gs_tree-text = lv_text.
      APPEND gs_tree TO gt_tree.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_NODE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*----------------------------------------------------------------------*
FORM handle_node_double_click  USING    p_node.

  DATA : lv_venid TYPE ztssvend-venid,
         lv_vname TYPE ztssvend-vname,
         lv_year  TYPE numc4.

  CASE p_node.
    WHEN '1000'.
    WHEN '2000'.
    WHEN OTHERS.
*      CLEAR gt_vdudat.
*      lv_venid = p_node.
*      READ TABLE gt_vendor INTO DATA(ls_vendor) WITH KEY venid = lv_venid.
*      IF sy-subrc = 0.
*        lv_vname = ls_vendor-vname.
*        PERFORM get_exp_detail_data USING lv_venid.
*        PERFORM refresh_alv_0400.
*      ENDIF.




  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_TREE_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GO_ALV_TREE  text
*----------------------------------------------------------------------*
FORM display_tree_0300  CHANGING co_tree TYPE REF TO cl_gui_simple_tree.

  PERFORM get_tree_data.

  CALL METHOD co_tree->add_nodes
    EXPORTING
      table_structure_name = 'MTREESNODE'
      node_table           = gt_tree
*  EXCEPTIONS
*     error_in_node_table  = 1
*     failed               = 2
*     dp_error             = 3
*     table_structure_name_not_found = 4
*     others               = 5
    .
*  CALL METHOD co_tree->expand_node
*    EXPORTING
*      node_key = 'ROOT'.
*
*  CALL METHOD co_tree->expand_node
*    EXPORTING
*      node_key = '1000'.
*
*  CALL METHOD co_tree->expand_node
*    EXPORTING
*      node_key = '2000'.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*  ENDIF.

* Expand Level
*  CALL METHOD go_tree->expand_root_nodes
*    EXPORTING
*      level_count    = 1
*      expand_subtree = ''.


ENDFORM.

----------------------------------------------------------------------------------
Extracted by Mass Download version 1.5.5 - E.G.Mellodew. 1998-2025. Sap Release 750
